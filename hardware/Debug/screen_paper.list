
screen_paper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036b0  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008034  08008034  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08008034  08008034  00018034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800803c  0800803c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800803c  0800803c  0001803c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08008044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  20000048  0800808c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000110c  0800808c  0002110c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e2f  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003167  00000000  00000000  00031e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  00035008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  000360e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015660  00000000  00000000  00036fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f34  00000000  00000000  0004c620  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000803a0  00000000  00000000  0005d554  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd8f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003950  00000000  00000000  000dd970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800496c 	.word	0x0800496c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	0800496c 	.word	0x0800496c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b08b      	sub	sp, #44	; 0x2c
 800043c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	2414      	movs	r4, #20
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2314      	movs	r3, #20
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f004 fa87 	bl	800495c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	4b4c      	ldr	r3, [pc, #304]	; (8000580 <MX_GPIO_Init+0x148>)
 8000450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000452:	4b4b      	ldr	r3, [pc, #300]	; (8000580 <MX_GPIO_Init+0x148>)
 8000454:	2104      	movs	r1, #4
 8000456:	430a      	orrs	r2, r1
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
 800045a:	4b49      	ldr	r3, [pc, #292]	; (8000580 <MX_GPIO_Init+0x148>)
 800045c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800045e:	2204      	movs	r2, #4
 8000460:	4013      	ands	r3, r2
 8000462:	613b      	str	r3, [r7, #16]
 8000464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000466:	4b46      	ldr	r3, [pc, #280]	; (8000580 <MX_GPIO_Init+0x148>)
 8000468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800046a:	4b45      	ldr	r3, [pc, #276]	; (8000580 <MX_GPIO_Init+0x148>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	430a      	orrs	r2, r1
 8000470:	62da      	str	r2, [r3, #44]	; 0x2c
 8000472:	4b43      	ldr	r3, [pc, #268]	; (8000580 <MX_GPIO_Init+0x148>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	4013      	ands	r3, r2
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b40      	ldr	r3, [pc, #256]	; (8000580 <MX_GPIO_Init+0x148>)
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <MX_GPIO_Init+0x148>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	62da      	str	r2, [r3, #44]	; 0x2c
 800048a:	4b3d      	ldr	r3, [pc, #244]	; (8000580 <MX_GPIO_Init+0x148>)
 800048c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b3a      	ldr	r3, [pc, #232]	; (8000580 <MX_GPIO_Init+0x148>)
 8000498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800049a:	4b39      	ldr	r3, [pc, #228]	; (8000580 <MX_GPIO_Init+0x148>)
 800049c:	2102      	movs	r1, #2
 800049e:	430a      	orrs	r2, r1
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004a2:	4b37      	ldr	r3, [pc, #220]	; (8000580 <MX_GPIO_Init+0x148>)
 80004a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a6:	2202      	movs	r2, #2
 80004a8:	4013      	ands	r3, r2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80004ae:	23a0      	movs	r3, #160	; 0xa0
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	2200      	movs	r2, #0
 80004b4:	2120      	movs	r1, #32
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fd4d 	bl	8001f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 80004bc:	4931      	ldr	r1, [pc, #196]	; (8000584 <MX_GPIO_Init+0x14c>)
 80004be:	4b32      	ldr	r3, [pc, #200]	; (8000588 <MX_GPIO_Init+0x150>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fd47 	bl	8001f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	0192      	lsls	r2, r2, #6
 80004ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	4a2e      	ldr	r2, [pc, #184]	; (800058c <MX_GPIO_Init+0x154>)
 80004d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	4a2c      	ldr	r2, [pc, #176]	; (8000590 <MX_GPIO_Init+0x158>)
 80004e0:	0019      	movs	r1, r3
 80004e2:	0010      	movs	r0, r2
 80004e4:	f001 faca 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	4a28      	ldr	r2, [pc, #160]	; (8000594 <MX_GPIO_Init+0x15c>)
 80004f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	193a      	adds	r2, r7, r4
 80004fc:	23a0      	movs	r3, #160	; 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f001 faba 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2281      	movs	r2, #129	; 0x81
 800050c:	0052      	lsls	r2, r2, #1
 800050e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	193a      	adds	r2, r7, r4
 800051e:	23a0      	movs	r3, #160	; 0xa0
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f001 faa9 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2220      	movs	r2, #32
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2201      	movs	r2, #1
 8000534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000542:	193a      	adds	r2, r7, r4
 8000544:	23a0      	movs	r3, #160	; 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	0011      	movs	r1, r2
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fa96 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 8000550:	0021      	movs	r1, r4
 8000552:	187b      	adds	r3, r7, r1
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <MX_GPIO_Init+0x14c>)
 8000556:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2201      	movs	r2, #1
 800055c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056a:	187b      	adds	r3, r7, r1
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <MX_GPIO_Init+0x150>)
 800056e:	0019      	movs	r1, r3
 8000570:	0010      	movs	r0, r2
 8000572:	f001 fa83 	bl	8001a7c <HAL_GPIO_Init>

}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b00b      	add	sp, #44	; 0x2c
 800057c:	bd90      	pop	{r4, r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	40021000 	.word	0x40021000
 8000584:	00000c14 	.word	0x00000c14
 8000588:	50000400 	.word	0x50000400
 800058c:	10110000 	.word	0x10110000
 8000590:	50000800 	.word	0x50000800
 8000594:	10120000 	.word	0x10120000

08000598 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_I2C1_Init+0x74>)
 800059e:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <MX_I2C1_Init+0x78>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_I2C1_Init+0x74>)
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <MX_I2C1_Init+0x7c>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_I2C1_Init+0x74>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_I2C1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_I2C1_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x74>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fcdb 	bl	8001f90 <HAL_I2C_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005de:	f000 f933 	bl	8000848 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_I2C1_Init+0x74>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fd68 	bl	80020bc <HAL_I2CEx_ConfigAnalogFilter>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005f0:	f000 f92a 	bl	8000848 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_I2C1_Init+0x74>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fdab 	bl	8002154 <HAL_I2CEx_ConfigDigitalFilter>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000602:	f000 f921 	bl	8000848 <Error_Handler>
  }

}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000cd4 	.word	0x20000cd4
 8000610:	40005400 	.word	0x40005400
 8000614:	00303d5b 	.word	0x00303d5b

08000618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	230c      	movs	r3, #12
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	0018      	movs	r0, r3
 8000626:	2314      	movs	r3, #20
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f004 f996 	bl	800495c <memset>
  if(i2cHandle->Instance==I2C1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a18      	ldr	r2, [pc, #96]	; (8000698 <HAL_I2C_MspInit+0x80>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d129      	bne.n	800068e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <HAL_I2C_MspInit+0x84>)
 800063c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_I2C_MspInit+0x84>)
 8000640:	2102      	movs	r1, #2
 8000642:	430a      	orrs	r2, r1
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_I2C_MspInit+0x84>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	2202      	movs	r2, #2
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8000652:	210c      	movs	r1, #12
 8000654:	187b      	adds	r3, r7, r1
 8000656:	22c0      	movs	r2, #192	; 0xc0
 8000658:	0092      	lsls	r2, r2, #2
 800065a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2212      	movs	r2, #18
 8000660:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2201      	movs	r2, #1
 8000666:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2203      	movs	r2, #3
 800066c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2204      	movs	r2, #4
 8000672:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	187b      	adds	r3, r7, r1
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_I2C_MspInit+0x88>)
 8000678:	0019      	movs	r1, r3
 800067a:	0010      	movs	r0, r2
 800067c:	f001 f9fe 	bl	8001a7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_I2C_MspInit+0x84>)
 8000682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_I2C_MspInit+0x84>)
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	0389      	lsls	r1, r1, #14
 800068a:	430a      	orrs	r2, r1
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b008      	add	sp, #32
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40005400 	.word	0x40005400
 800069c:	40021000 	.word	0x40021000
 80006a0:	50000400 	.word	0x50000400

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f001 f8b5 	bl	8001818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f84f 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f7ff fec1 	bl	8000438 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006b6:	f7ff ff6f 	bl	8000598 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006ba:	f000 f8cb 	bl	8000854 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006be:	f000 f901 	bl	80008c4 <MX_SPI2_Init>
  MX_TSC_Init();
 80006c2:	f000 fa7d 	bl	8000bc0 <MX_TSC_Init>
  MX_USART1_UART_Init();
 80006c6:	f000 fb5b 	bl	8000d80 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80006ca:	f000 fbcd 	bl	8000e68 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

	gde021a1_Init();
 80006ce:	f000 fc33 	bl	8000f38 <gde021a1_Init>
	gde021a1_Init(); //why need 2 init?!
 80006d2:	f000 fc31 	bl	8000f38 <gde021a1_Init>

  // for debug // BEGIN
	#define BLACK 0
	clear_paper_screen();
 80006d6:	f003 fe31 	bl	800433c <clear_paper_screen>
	set_font(12);
 80006da:	200c      	movs	r0, #12
 80006dc:	f004 f860 	bl	80047a0 <set_font>
	uint8_t string[] = "V.1 memory display";
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4a19      	ldr	r2, [pc, #100]	; (8000748 <main+0xa4>)
 80006e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006e6:	c313      	stmia	r3!, {r0, r1, r4}
 80006e8:	6811      	ldr	r1, [r2, #0]
 80006ea:	6019      	str	r1, [r3, #0]
 80006ec:	8891      	ldrh	r1, [r2, #4]
 80006ee:	8099      	strh	r1, [r3, #4]
 80006f0:	7992      	ldrb	r2, [r2, #6]
 80006f2:	719a      	strb	r2, [r3, #6]
	draw_string(20, 50, string);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	001a      	movs	r2, r3
 80006f8:	2132      	movs	r1, #50	; 0x32
 80006fa:	2014      	movs	r0, #20
 80006fc:	f003 fff0 	bl	80046e0 <draw_string>
	draw_h_line(0, 40 , 172);
 8000700:	22ac      	movs	r2, #172	; 0xac
 8000702:	2128      	movs	r1, #40	; 0x28
 8000704:	2000      	movs	r0, #0
 8000706:	f003 fed2 	bl	80044ae <draw_h_line>
	draw_rectangle(15, 45, 140, 20);
 800070a:	2314      	movs	r3, #20
 800070c:	228c      	movs	r2, #140	; 0x8c
 800070e:	212d      	movs	r1, #45	; 0x2d
 8000710:	200f      	movs	r0, #15
 8000712:	f003 fefd 	bl	8004510 <draw_rectangle>
	fill_rectangle(10, 10, 152, 10, BLACK);
 8000716:	2300      	movs	r3, #0
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	230a      	movs	r3, #10
 800071c:	2298      	movs	r2, #152	; 0x98
 800071e:	210a      	movs	r1, #10
 8000720:	200a      	movs	r0, #10
 8000722:	f004 f873 	bl	800480c <fill_rectangle>

	display_screen();
 8000726:	f004 f8bf 	bl	80048a8 <display_screen>
	HAL_Delay(3000);
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <main+0xa8>)
 800072c:	0018      	movs	r0, r3
 800072e:	f001 f8d3 	bl	80018d8 <HAL_Delay>
	fill_rectangle(0, 0, 172, 40, BLACK);
 8000732:	2300      	movs	r3, #0
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2328      	movs	r3, #40	; 0x28
 8000738:	22ac      	movs	r2, #172	; 0xac
 800073a:	2100      	movs	r1, #0
 800073c:	2000      	movs	r0, #0
 800073e:	f004 f865 	bl	800480c <fill_rectangle>
	display_screen();
 8000742:	f004 f8b1 	bl	80048a8 <display_screen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0xa2>
 8000748:	08004984 	.word	0x08004984
 800074c:	00000bb8 	.word	0x00000bb8

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b09d      	sub	sp, #116	; 0x74
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	2438      	movs	r4, #56	; 0x38
 8000758:	193b      	adds	r3, r7, r4
 800075a:	0018      	movs	r0, r3
 800075c:	2338      	movs	r3, #56	; 0x38
 800075e:	001a      	movs	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f004 f8fb 	bl	800495c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	2324      	movs	r3, #36	; 0x24
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	0018      	movs	r0, r3
 800076c:	2314      	movs	r3, #20
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f004 f8f3 	bl	800495c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000776:	003b      	movs	r3, r7
 8000778:	0018      	movs	r0, r3
 800077a:	2324      	movs	r3, #36	; 0x24
 800077c:	001a      	movs	r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	f004 f8ec 	bl	800495c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <SystemClock_Config+0xf0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <SystemClock_Config+0xf4>)
 800078a:	401a      	ands	r2, r3
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <SystemClock_Config+0xf0>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	0109      	lsls	r1, r1, #4
 8000792:	430a      	orrs	r2, r1
 8000794:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000796:	0021      	movs	r1, r4
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2221      	movs	r2, #33	; 0x21
 800079c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	22a0      	movs	r2, #160	; 0xa0
 80007a2:	02d2      	lsls	r2, r2, #11
 80007a4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2201      	movs	r2, #1
 80007aa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2202      	movs	r2, #2
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	0252      	lsls	r2, r2, #9
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	02d2      	lsls	r2, r2, #11
 80007c0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	03d2      	lsls	r2, r2, #15
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fe51 	bl	8002474 <HAL_RCC_OscConfig>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007d6:	f000 f837 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	2124      	movs	r1, #36	; 0x24
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	220f      	movs	r2, #15
 80007e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2203      	movs	r2, #3
 80007e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2100      	movs	r1, #0
 80007fe:	0018      	movs	r0, r3
 8000800:	f002 f9f8 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000808:	f000 f81e 	bl	8000848 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800080c:	003b      	movs	r3, r7
 800080e:	2249      	movs	r2, #73	; 0x49
 8000810:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000812:	003b      	movs	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000818:	003b      	movs	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800081e:	003b      	movs	r3, r7
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	04d2      	lsls	r2, r2, #19
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000826:	003b      	movs	r3, r7
 8000828:	0018      	movs	r0, r3
 800082a:	f002 fbc7 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000832:	f000 f809 	bl	8000848 <Error_Handler>
  }
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b01d      	add	sp, #116	; 0x74
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40007000 	.word	0x40007000
 8000844:	ffffe7ff 	.word	0xffffe7ff

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_SPI1_Init+0x68>)
 800085a:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <MX_SPI1_Init+0x6c>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_SPI1_Init+0x68>)
 8000860:	2282      	movs	r2, #130	; 0x82
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_SPI1_Init+0x68>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0212      	lsls	r2, r2, #8
 800086c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_SPI1_Init+0x68>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_SPI1_Init+0x68>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_SPI1_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_SPI1_Init+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_SPI1_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_SPI1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_SPI1_Init+0x68>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <MX_SPI1_Init+0x68>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 fcec 	bl	8003284 <HAL_SPI_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b0:	f7ff ffca 	bl	8000848 <Error_Handler>
  }

}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000d78 	.word	0x20000d78
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_SPI2_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_SPI2_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI2_Init+0x64>)
 80008d0:	2282      	movs	r2, #130	; 0x82
 80008d2:	0052      	lsls	r2, r2, #1
 80008d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI2_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI2_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI2_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI2_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_SPI2_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI2_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_SPI2_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI2_Init+0x64>)
 800090e:	2207      	movs	r2, #7
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MX_SPI2_Init+0x64>)
 8000914:	0018      	movs	r0, r3
 8000916:	f002 fcb5 	bl	8003284 <HAL_SPI_Init>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 800091e:	f7ff ff93 	bl	8000848 <Error_Handler>
  }

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000d20 	.word	0x20000d20
 800092c:	40003800 	.word	0x40003800

08000930 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b08b      	sub	sp, #44	; 0x2c
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	2314      	movs	r3, #20
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f004 f80a 	bl	800495c <memset>
  if(spiHandle->Instance==SPI1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a42      	ldr	r2, [pc, #264]	; (8000a58 <HAL_SPI_MspInit+0x128>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d14e      	bne.n	80009f0 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000956:	4b41      	ldr	r3, [pc, #260]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0149      	lsls	r1, r1, #5
 800095c:	430a      	orrs	r2, r1
 800095e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000964:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000966:	2101      	movs	r1, #1
 8000968:	430a      	orrs	r2, r1
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
 800096c:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	2201      	movs	r2, #1
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 800097a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800097c:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 800097e:	2102      	movs	r1, #2
 8000980:	430a      	orrs	r2, r1
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
 8000984:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	2202      	movs	r2, #2
 800098a:	4013      	ands	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000990:	2114      	movs	r1, #20
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	0212      	lsls	r2, r2, #8
 8000998:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	000c      	movs	r4, r1
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2202      	movs	r2, #2
 80009a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 80009b4:	193a      	adds	r2, r7, r4
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 f85d 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2228      	movs	r2, #40	; 0x28
 80009c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <HAL_SPI_MspInit+0x130>)
 80009e6:	0019      	movs	r1, r3
 80009e8:	0010      	movs	r0, r2
 80009ea:	f001 f847 	bl	8001a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009ee:	e02e      	b.n	8000a4e <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <HAL_SPI_MspInit+0x134>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d129      	bne.n	8000a4e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 80009fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	01c9      	lsls	r1, r1, #7
 8000a04:	430a      	orrs	r2, r1
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000a0e:	2102      	movs	r1, #2
 8000a10:	430a      	orrs	r2, r1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_SPI_MspInit+0x12c>)
 8000a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a18:	2202      	movs	r2, #2
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000a20:	2114      	movs	r1, #20
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	22f0      	movs	r2, #240	; 0xf0
 8000a26:	0212      	lsls	r2, r2, #8
 8000a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_SPI_MspInit+0x130>)
 8000a46:	0019      	movs	r1, r3
 8000a48:	0010      	movs	r0, r2
 8000a4a:	f001 f817 	bl	8001a7c <HAL_GPIO_Init>
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b00b      	add	sp, #44	; 0x2c
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40013000 	.word	0x40013000
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	50000400 	.word	0x50000400
 8000a64:	40003800 	.word	0x40003800

08000a68 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <HAL_SPI_MspDeInit+0x68>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d113      	bne.n	8000aa2 <HAL_SPI_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_SPI_MspDeInit+0x6c>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_SPI_MspDeInit+0x6c>)
 8000a80:	4915      	ldr	r1, [pc, #84]	; (8000ad8 <HAL_SPI_MspDeInit+0x70>)
 8000a82:	400a      	ands	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
    /**SPI1 GPIO Configuration    
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(ePD1_CS_GPIO_Port, ePD1_CS_Pin);
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	021a      	lsls	r2, r3, #8
 8000a8a:	23a0      	movs	r3, #160	; 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 f969 	bl	8001d68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, ePD1_SCK_Pin|ePD1_MOSI_Pin);
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_SPI_MspDeInit+0x74>)
 8000a98:	2128      	movs	r1, #40	; 0x28
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 f964 	bl	8001d68 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
} 
 8000aa0:	e011      	b.n	8000ac6 <HAL_SPI_MspDeInit+0x5e>
  else if(spiHandle->Instance==SPI2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_SPI_MspDeInit+0x78>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d10c      	bne.n	8000ac6 <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_SPI_MspDeInit+0x6c>)
 8000aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_SPI_MspDeInit+0x6c>)
 8000ab2:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <HAL_SPI_MspDeInit+0x7c>)
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin);
 8000ab8:	23f0      	movs	r3, #240	; 0xf0
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_SPI_MspDeInit+0x74>)
 8000abe:	0019      	movs	r1, r3
 8000ac0:	0010      	movs	r0, r2
 8000ac2:	f001 f951 	bl	8001d68 <HAL_GPIO_DeInit>
} 
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	40013000 	.word	0x40013000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	ffffefff 	.word	0xffffefff
 8000adc:	50000400 	.word	0x50000400
 8000ae0:	40003800 	.word	0x40003800
 8000ae4:	ffffbfff 	.word	0xffffbfff

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_MspInit+0x24>)
 8000aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x24>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	430a      	orrs	r2, r1
 8000af6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <HAL_MspInit+0x24>)
 8000afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_MspInit+0x24>)
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	0549      	lsls	r1, r1, #21
 8000b02:	430a      	orrs	r2, r1
 8000b04:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 feb8 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <SystemInit+0x64>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <SystemInit+0x64>)
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	0049      	lsls	r1, r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <SystemInit+0x64>)
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <SystemInit+0x64>)
 8000b5c:	4913      	ldr	r1, [pc, #76]	; (8000bac <SystemInit+0x68>)
 8000b5e:	400a      	ands	r2, r1
 8000b60:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <SystemInit+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <SystemInit+0x64>)
 8000b68:	4911      	ldr	r1, [pc, #68]	; (8000bb0 <SystemInit+0x6c>)
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <SystemInit+0x64>)
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SystemInit+0x64>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	438a      	bics	r2, r1
 8000b78:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <SystemInit+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <SystemInit+0x64>)
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <SystemInit+0x70>)
 8000b82:	400a      	ands	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <SystemInit+0x64>)
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <SystemInit+0x64>)
 8000b8c:	490a      	ldr	r1, [pc, #40]	; (8000bb8 <SystemInit+0x74>)
 8000b8e:	400a      	ands	r2, r1
 8000b90:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SystemInit+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <SystemInit+0x78>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	0512      	lsls	r2, r2, #20
 8000b9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	88ff400c 	.word	0x88ff400c
 8000bb0:	fef6fff6 	.word	0xfef6fff6
 8000bb4:	fffbffff 	.word	0xfffbffff
 8000bb8:	ff02ffff 	.word	0xff02ffff
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /** Configure the TSC peripheral 
  */
  htsc.Instance = TSC;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_TSC_Init+0x80>)
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <MX_TSC_Init+0x84>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_TSC_Init+0x80>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	0552      	lsls	r2, r2, #21
 8000bd0:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_TSC_Init+0x80>)
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	0452      	lsls	r2, r2, #17
 8000bd8:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_TSC_Init+0x80>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_TSC_Init+0x80>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_TSC_Init+0x80>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_TSC_Init+0x80>)
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	0192      	lsls	r2, r2, #6
 8000bf2:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_TSC_Init+0x80>)
 8000bf6:	22a0      	movs	r2, #160	; 0xa0
 8000bf8:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_TSC_Init+0x80>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_TSC_Init+0x80>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_TSC_Init+0x80>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_TSC_Init+0x80>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_TSC_Init+0x80>)
 8000c14:	2291      	movs	r2, #145	; 0x91
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_TSC_Init+0x80>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_TSC_Init+0x80>)
 8000c22:	2291      	movs	r2, #145	; 0x91
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <MX_TSC_Init+0x80>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 fdc5 	bl	80037ba <HAL_TSC_Init>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TSC_Init+0x78>
  {
    Error_Handler();
 8000c34:	f7ff fe08 	bl	8000848 <Error_Handler>
  }

}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000dd0 	.word	0x20000dd0
 8000c44:	40024000 	.word	0x40024000

08000c48 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b08b      	sub	sp, #44	; 0x2c
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	2314      	movs	r3, #20
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	0018      	movs	r0, r3
 8000c56:	2314      	movs	r3, #20
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f003 fe7e 	bl	800495c <memset>
  if(tscHandle->Instance==TSC)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a43      	ldr	r2, [pc, #268]	; (8000d74 <HAL_TSC_MspInit+0x12c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d17f      	bne.n	8000d6a <HAL_TSC_MspInit+0x122>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0249      	lsls	r1, r1, #9
 8000c74:	430a      	orrs	r2, r1
 8000c76:	631a      	str	r2, [r3, #48]	; 0x30
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	025b      	lsls	r3, r3, #9
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	2201      	movs	r2, #1
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <HAL_TSC_MspInit+0x130>)
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000cb6:	2414      	movs	r4, #20
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2244      	movs	r2, #68	; 0x44
 8000cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	193a      	adds	r2, r7, r4
 8000cd8:	23a0      	movs	r3, #160	; 0xa0
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	0011      	movs	r1, r2
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 fecc 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2288      	movs	r2, #136	; 0x88
 8000ce8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	2212      	movs	r2, #18
 8000cee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	2203      	movs	r2, #3
 8000d00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	193a      	adds	r2, r7, r4
 8000d04:	23a0      	movs	r3, #160	; 0xa0
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	0011      	movs	r1, r2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 feb6 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d10:	0021      	movs	r1, r4
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	000c      	movs	r4, r1
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_TSC_MspInit+0x134>)
 8000d36:	0019      	movs	r1, r3
 8000d38:	0010      	movs	r0, r2
 8000d3a:	f000 fe9f 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d3e:	0021      	movs	r1, r4
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2202      	movs	r2, #2
 8000d44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2212      	movs	r2, #18
 8000d4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_TSC_MspInit+0x134>)
 8000d62:	0019      	movs	r1, r3
 8000d64:	0010      	movs	r0, r2
 8000d66:	f000 fe89 	bl	8001a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b00b      	add	sp, #44	; 0x2c
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40024000 	.word	0x40024000
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	50000400 	.word	0x50000400

08000d80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <MX_USART1_UART_Init+0x5c>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000d8c:	22e1      	movs	r2, #225	; 0xe1
 8000d8e:	0252      	lsls	r2, r2, #9
 8000d90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <MX_USART1_UART_Init+0x58>)
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 fd9f 	bl	8003908 <HAL_UART_Init>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dce:	f7ff fd3b 	bl	8000848 <Error_Handler>
  }

}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000e14 	.word	0x20000e14
 8000ddc:	40013800 	.word	0x40013800

08000de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	230c      	movs	r3, #12
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	0018      	movs	r0, r3
 8000dee:	2314      	movs	r3, #20
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f003 fdb2 	bl	800495c <memset>
  if(uartHandle->Instance==USART1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <HAL_UART_MspInit+0x80>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12a      	bne.n	8000e58 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_UART_MspInit+0x84>)
 8000e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_UART_MspInit+0x84>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	01c9      	lsls	r1, r1, #7
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_UART_MspInit+0x84>)
 8000e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_UART_MspInit+0x84>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_UART_MspInit+0x84>)
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	2201      	movs	r2, #1
 8000e22:	4013      	ands	r3, r2
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e28:	210c      	movs	r1, #12
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	22c0      	movs	r2, #192	; 0xc0
 8000e2e:	00d2      	lsls	r2, r2, #3
 8000e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2202      	movs	r2, #2
 8000e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2203      	movs	r2, #3
 8000e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2204      	movs	r2, #4
 8000e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	187a      	adds	r2, r7, r1
 8000e4c:	23a0      	movs	r3, #160	; 0xa0
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 fe12 	bl	8001a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b008      	add	sp, #32
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40013800 	.word	0x40013800
 8000e64:	40021000 	.word	0x40021000

08000e68 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_USB_PCD_Init+0x44>)
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <MX_USB_PCD_Init+0x48>)
 8000e70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USB_PCD_Init+0x44>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USB_PCD_Init+0x44>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USB_PCD_Init+0x44>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USB_PCD_Init+0x44>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USB_PCD_Init+0x44>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USB_PCD_Init+0x44>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <MX_USB_PCD_Init+0x44>)
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f001 f9a7 	bl	80021ec <HAL_PCD_Init>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000ea2:	f7ff fcd1 	bl	8000848 <Error_Handler>
  }

}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000e94 	.word	0x20000e94
 8000eb0:	40005c00 	.word	0x40005c00

08000eb4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_PCD_MspInit+0x28>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d106      	bne.n	8000ed4 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_PCD_MspInit+0x2c>)
 8000ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_PCD_MspInit+0x2c>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0409      	lsls	r1, r1, #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40005c00 	.word	0x40005c00
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eea:	e003      	b.n	8000ef4 <LoopCopyDataInit>

08000eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ef2:	3104      	adds	r1, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000efc:	d3f6      	bcc.n	8000eec <CopyDataInit>
  ldr  r2, =_sbss
 8000efe:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000f00:	e002      	b.n	8000f08 <LoopFillZerobss>

08000f02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000f02:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f06:	3204      	adds	r2, #4

08000f08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <LoopForever+0x16>)
  cmp  r2, r3
 8000f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f0c:	d3f9      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f0e:	f7ff fe19 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f12:	f003 fcff 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f16:	f7ff fbc5 	bl	80006a4 <main>

08000f1a <LoopForever>:

LoopForever:
    b LoopForever
 8000f1a:	e7fe      	b.n	8000f1a <LoopForever>
  ldr   r0, =_estack
 8000f1c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000f20:	08008044 	.word	0x08008044
  ldr  r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f28:	20000048 	.word	0x20000048
  ldr  r2, =_sbss
 8000f2c:	20000048 	.word	0x20000048
  ldr  r3, = _ebss
 8000f30:	2000110c 	.word	0x2000110c

08000f34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC1_COMP_IRQHandler>
	...

08000f38 <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 8000f44:	f000 fb56 	bl	80015f4 <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 8000f48:	2010      	movs	r0, #16
 8000f4a:	f000 fc31 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 fc04 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 8000f54:	2011      	movs	r0, #17
 8000f56:	f000 fc2b 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 fbfe 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 8000f60:	2044      	movs	r0, #68	; 0x44
 8000f62:	f000 fc25 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 fbf8 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 8000f6c:	2011      	movs	r0, #17
 8000f6e:	f000 fbf5 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 8000f72:	2045      	movs	r0, #69	; 0x45
 8000f74:	f000 fc1c 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 fbef 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 8000f7e:	20ab      	movs	r0, #171	; 0xab
 8000f80:	f000 fbec 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 8000f84:	204e      	movs	r0, #78	; 0x4e
 8000f86:	f000 fc13 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 fbe6 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 8000f90:	204f      	movs	r0, #79	; 0x4f
 8000f92:	f000 fc0d 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 fbe0 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 8000f9c:	20f0      	movs	r0, #240	; 0xf0
 8000f9e:	f000 fc07 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 8000fa2:	201f      	movs	r0, #31
 8000fa4:	f000 fbda 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 8000fa8:	2021      	movs	r0, #33	; 0x21
 8000faa:	f000 fc01 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 fbd4 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 8000fb4:	202c      	movs	r0, #44	; 0x2c
 8000fb6:	f000 fbfb 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 8000fba:	20a0      	movs	r0, #160	; 0xa0
 8000fbc:	f000 fbce 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 8000fc0:	203c      	movs	r0, #60	; 0x3c
 8000fc2:	f000 fbf5 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f000 fbc8 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 8000fcc:	2032      	movs	r0, #50	; 0x32
 8000fce:	f000 fbef 	bl	80017b0 <EPD_IO_WriteReg>

  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e00c      	b.n	8000ff4 <gde021a1_Init+0xbc>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4a09      	ldr	r2, [pc, #36]	; (8001004 <gde021a1_Init+0xcc>)
 8000fe0:	5cd3      	ldrb	r3, [r2, r3]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 fbb9 	bl	800175c <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	3201      	adds	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b59      	cmp	r3, #89	; 0x59
 8000ffa:	d9ee      	bls.n	8000fda <gde021a1_Init+0xa2>
  }
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}
 8001004:	080049bc 	.word	0x080049bc

08001008 <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	0002      	movs	r2, r0
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 8001014:	2024      	movs	r0, #36	; 0x24
 8001016:	f000 fbcb 	bl	80017b0 <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fb9b 	bl	800175c <EPD_IO_WriteData>
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}

0800102e <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800102e:	b5b0      	push	{r4, r5, r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	0005      	movs	r5, r0
 8001036:	000c      	movs	r4, r1
 8001038:	0010      	movs	r0, r2
 800103a:	0019      	movs	r1, r3
 800103c:	1dbb      	adds	r3, r7, #6
 800103e:	1c2a      	adds	r2, r5, #0
 8001040:	801a      	strh	r2, [r3, #0]
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	1c22      	adds	r2, r4, #0
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	1cbb      	adds	r3, r7, #2
 800104a:	1c02      	adds	r2, r0, #0
 800104c:	801a      	strh	r2, [r3, #0]
 800104e:	003b      	movs	r3, r7
 8001050:	1c0a      	adds	r2, r1, #0
 8001052:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 8001054:	2044      	movs	r0, #68	; 0x44
 8001056:	f000 fbab 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	0018      	movs	r0, r3
 8001060:	f000 fb7c 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 8001064:	003b      	movs	r3, r7
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	0018      	movs	r0, r3
 800106a:	f000 fb77 	bl	800175c <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 800106e:	2045      	movs	r0, #69	; 0x45
 8001070:	f000 fb9e 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	0018      	movs	r0, r3
 800107a:	f000 fb6f 	bl	800175c <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 800107e:	1cbb      	adds	r3, r7, #2
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fb6a 	bl	800175c <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 8001088:	204e      	movs	r0, #78	; 0x4e
 800108a:	f000 fb91 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	0018      	movs	r0, r3
 8001094:	f000 fb62 	bl	800175c <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 8001098:	204f      	movs	r0, #79	; 0x4f
 800109a:	f000 fb89 	bl	80017b0 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 800109e:	1dbb      	adds	r3, r7, #6
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	0018      	movs	r0, r3
 80010a4:	f000 fb5a 	bl	800175c <EPD_IO_WriteData>
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bdb0      	pop	{r4, r5, r7, pc}

080010b0 <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 80010b4:	23ac      	movs	r3, #172	; 0xac
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 80010c0:	2312      	movs	r3, #18
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 80010cc:	2022      	movs	r0, #34	; 0x22
 80010ce:	f000 fb6f 	bl	80017b0 <EPD_IO_WriteReg>

  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 80010d2:	20c4      	movs	r0, #196	; 0xc4
 80010d4:	f000 fb42 	bl	800175c <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 80010d8:	2020      	movs	r0, #32
 80010da:	f000 fb69 	bl	80017b0 <EPD_IO_WriteReg>
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 80010e8:	2022      	movs	r0, #34	; 0x22
 80010ea:	f000 fb61 	bl	80017b0 <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */
  EPD_IO_WriteData(0x03);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f000 fb34 	bl	800175c <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 80010f4:	2020      	movs	r0, #32
 80010f6:	f000 fb5b 	bl	80017b0 <EPD_IO_WriteReg>
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	0005      	movs	r5, r0
 8001108:	000c      	movs	r4, r1
 800110a:	0010      	movs	r0, r2
 800110c:	0019      	movs	r1, r3
 800110e:	1dbb      	adds	r3, r7, #6
 8001110:	1c2a      	adds	r2, r5, #0
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	1c22      	adds	r2, r4, #0
 8001118:	801a      	strh	r2, [r3, #0]
 800111a:	1cbb      	adds	r3, r7, #2
 800111c:	1c02      	adds	r2, r0, #0
 800111e:	801a      	strh	r2, [r3, #0]
 8001120:	003b      	movs	r3, r7
 8001122:	1c0a      	adds	r2, r1, #0
 8001124:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 800112a:	230f      	movs	r3, #15
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4] = {0};
 8001132:	2308      	movs	r3, #8
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
  uint8_t nb_4_pixels, data_res = 0;
 800113a:	230d      	movs	r3, #13
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]

  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 8001142:	2024      	movs	r0, #36	; 0x24
 8001144:	f000 fb34 	bl	80017b0 <EPD_IO_WriteReg>

  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 8001148:	1cbb      	adds	r3, r7, #2
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2207      	movs	r2, #7
 800114e:	4013      	ands	r3, r2
 8001150:	b29b      	uxth	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d000      	beq.n	8001158 <gde021a1_DrawImage+0x58>
 8001156:	e087      	b.n	8001268 <gde021a1_DrawImage+0x168>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e073      	b.n	8001246 <gde021a1_DrawImage+0x146>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 800115e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	18d2      	adds	r2, r2, r3
 8001164:	210f      	movs	r1, #15
 8001166:	187b      	adds	r3, r7, r1
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 800116c:	187b      	adds	r3, r7, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05f      	beq.n	8001234 <gde021a1_DrawImage+0x134>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8001174:	230e      	movs	r3, #14
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e054      	b.n	8001228 <gde021a1_DrawImage+0x128>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	e029      	b.n	80011d8 <gde021a1_DrawImage+0xd8>
          {
            if (((pixels_4) & 0x01) == 1)
 8001184:	230f      	movs	r3, #15
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	4013      	ands	r3, r2
 800118e:	d00d      	beq.n	80011ac <gde021a1_DrawImage+0xac>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 8001190:	2008      	movs	r0, #8
 8001192:	183a      	adds	r2, r7, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2203      	movs	r2, #3
 800119c:	4393      	bics	r3, r2
 800119e:	b2d9      	uxtb	r1, r3
 80011a0:	183a      	adds	r2, r7, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	1c0a      	adds	r2, r1, #0
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e00c      	b.n	80011c6 <gde021a1_DrawImage+0xc6>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 80011ac:	2008      	movs	r0, #8
 80011ae:	183a      	adds	r2, r7, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2203      	movs	r2, #3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b2d9      	uxtb	r1, r3
 80011bc:	183a      	adds	r2, r7, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	1c0a      	adds	r2, r1, #0
 80011c4:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;
 80011c6:	220f      	movs	r2, #15
 80011c8:	18bb      	adds	r3, r7, r2
 80011ca:	18ba      	adds	r2, r7, r2
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	0852      	lsrs	r2, r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3301      	adds	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d9d2      	bls.n	8001184 <gde021a1_DrawImage+0x84>
          }

          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 80011de:	2108      	movs	r1, #8
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	019b      	lsls	r3, r3, #6
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b25a      	sxtb	r2, r3
 8001200:	187b      	adds	r3, r7, r1
 8001202:	78db      	ldrb	r3, [r3, #3]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b25a      	sxtb	r2, r3
 800120a:	210d      	movs	r1, #13
 800120c:	187b      	adds	r3, r7, r1
 800120e:	701a      	strb	r2, [r3, #0]

          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 8001210:	187b      	adds	r3, r7, r1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	0018      	movs	r0, r3
 8001218:	f000 faa0 	bl	800175c <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 800121c:	210e      	movs	r1, #14
 800121e:	187b      	adds	r3, r7, r1
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	187b      	adds	r3, r7, r1
 8001224:	3201      	adds	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	230e      	movs	r3, #14
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d9a5      	bls.n	800117e <gde021a1_DrawImage+0x7e>
 8001232:	e005      	b.n	8001240 <gde021a1_DrawImage+0x140>
      }
      else
      {
        /* 1 byte read from xbm files is equivalent to 8 pixels in the
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 8001234:	20ff      	movs	r0, #255	; 0xff
 8001236:	f000 fa91 	bl	800175c <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 800123a:	20ff      	movs	r0, #255	; 0xff
 800123c:	f000 fa8e 	bl	800175c <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	003b      	movs	r3, r7
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	1cba      	adds	r2, r7, #2
 800124c:	8812      	ldrh	r2, [r2, #0]
 800124e:	0892      	lsrs	r2, r2, #2
 8001250:	b292      	uxth	r2, r2
 8001252:	4353      	muls	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	da00      	bge.n	800125a <gde021a1_DrawImage+0x15a>
 8001258:	3301      	adds	r3, #1
 800125a:	105b      	asrs	r3, r3, #1
 800125c:	001a      	movs	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4293      	cmp	r3, r2
 8001262:	d200      	bcs.n	8001266 <gde021a1_DrawImage+0x166>
 8001264:	e77b      	b.n	800115e <gde021a1_DrawImage+0x5e>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 8001266:	e10f      	b.n	8001488 <gde021a1_DrawImage+0x388>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e0fb      	b.n	8001466 <gde021a1_DrawImage+0x366>
      pixels_4 = pdata[i];
 800126e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	18d2      	adds	r2, r2, r3
 8001274:	230f      	movs	r3, #15
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	1cbb      	adds	r3, r7, #2
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	b29b      	uxth	r3, r3
 8001288:	3301      	adds	r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	da00      	bge.n	8001290 <gde021a1_DrawImage+0x190>
 800128e:	3301      	adds	r3, #1
 8001290:	105b      	asrs	r3, r3, #1
 8001292:	0019      	movs	r1, r3
 8001294:	0010      	movs	r0, r2
 8001296:	f7fe ffbd 	bl	8000214 <__aeabi_uidivmod>
 800129a:	1e0b      	subs	r3, r1, #0
 800129c:	d100      	bne.n	80012a0 <gde021a1_DrawImage+0x1a0>
 800129e:	e071      	b.n	8001384 <gde021a1_DrawImage+0x284>
        if (pixels_4 !=0)
 80012a0:	230f      	movs	r3, #15
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d05f      	beq.n	800136a <gde021a1_DrawImage+0x26a>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80012aa:	230e      	movs	r3, #14
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e054      	b.n	800135e <gde021a1_DrawImage+0x25e>
            for (j= 0; j<4; j++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	e029      	b.n	800130e <gde021a1_DrawImage+0x20e>
              if (((pixels_4) & 0x01) == 1)
 80012ba:	230f      	movs	r3, #15
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <gde021a1_DrawImage+0x1e2>
                pixels_4_grey[j] &= 0xFC;
 80012c6:	2008      	movs	r0, #8
 80012c8:	183a      	adds	r2, r7, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	18d3      	adds	r3, r2, r3
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2203      	movs	r2, #3
 80012d2:	4393      	bics	r3, r2
 80012d4:	b2d9      	uxtb	r1, r3
 80012d6:	183a      	adds	r2, r7, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	18d3      	adds	r3, r2, r3
 80012dc:	1c0a      	adds	r2, r1, #0
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e00c      	b.n	80012fc <gde021a1_DrawImage+0x1fc>
                pixels_4_grey[j] |= 0x03;
 80012e2:	2008      	movs	r0, #8
 80012e4:	183a      	adds	r2, r7, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	18d3      	adds	r3, r2, r3
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b2d9      	uxtb	r1, r3
 80012f2:	183a      	adds	r2, r7, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	18d3      	adds	r3, r2, r3
 80012f8:	1c0a      	adds	r2, r1, #0
 80012fa:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 80012fc:	220f      	movs	r2, #15
 80012fe:	18bb      	adds	r3, r7, r2
 8001300:	18ba      	adds	r2, r7, r2
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	0852      	lsrs	r2, r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	3301      	adds	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d9d2      	bls.n	80012ba <gde021a1_DrawImage+0x1ba>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8001314:	2108      	movs	r1, #8
 8001316:	187b      	adds	r3, r7, r1
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	019b      	lsls	r3, r3, #6
 800131c:	b25a      	sxtb	r2, r3
 800131e:	187b      	adds	r3, r7, r1
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	b25b      	sxtb	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b25a      	sxtb	r2, r3
 800132a:	187b      	adds	r3, r7, r1
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b25a      	sxtb	r2, r3
 8001336:	187b      	adds	r3, r7, r1
 8001338:	78db      	ldrb	r3, [r3, #3]
 800133a:	b25b      	sxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b25a      	sxtb	r2, r3
 8001340:	210d      	movs	r1, #13
 8001342:	187b      	adds	r3, r7, r1
 8001344:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 8001346:	187b      	adds	r3, r7, r1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	0018      	movs	r0, r3
 800134e:	f000 fa05 	bl	800175c <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8001352:	210e      	movs	r1, #14
 8001354:	187b      	adds	r3, r7, r1
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	187b      	adds	r3, r7, r1
 800135a:	3201      	adds	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	230e      	movs	r3, #14
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d9a5      	bls.n	80012b4 <gde021a1_DrawImage+0x1b4>
 8001368:	e07a      	b.n	8001460 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0)
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d000      	beq.n	8001376 <gde021a1_DrawImage+0x276>
 8001374:	e074      	b.n	8001460 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 8001376:	20ff      	movs	r0, #255	; 0xff
 8001378:	f000 f9f0 	bl	800175c <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 800137c:	20ff      	movs	r0, #255	; 0xff
 800137e:	f000 f9ed 	bl	800175c <EPD_IO_WriteData>
 8001382:	e06d      	b.n	8001460 <gde021a1_DrawImage+0x360>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	1cbb      	adds	r3, r7, #2
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	b29b      	uxth	r3, r3
 8001390:	3301      	adds	r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	da00      	bge.n	8001398 <gde021a1_DrawImage+0x298>
 8001396:	3301      	adds	r3, #1
 8001398:	105b      	asrs	r3, r3, #1
 800139a:	0019      	movs	r1, r3
 800139c:	0010      	movs	r0, r2
 800139e:	f7fe ff39 	bl	8000214 <__aeabi_uidivmod>
 80013a2:	1e0b      	subs	r3, r1, #0
 80013a4:	d15c      	bne.n	8001460 <gde021a1_DrawImage+0x360>
        if (pixels_4 !=0xf0)
 80013a6:	230f      	movs	r3, #15
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2bf0      	cmp	r3, #240	; 0xf0
 80013ae:	d04f      	beq.n	8001450 <gde021a1_DrawImage+0x350>
          for (j= 0; j<4; j++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e029      	b.n	800140a <gde021a1_DrawImage+0x30a>
            if (((pixels_4) & 0x01) == 1)
 80013b6:	230f      	movs	r3, #15
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	d00d      	beq.n	80013de <gde021a1_DrawImage+0x2de>
              pixels_4_grey[j] &= 0xFC;
 80013c2:	2008      	movs	r0, #8
 80013c4:	183a      	adds	r2, r7, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4393      	bics	r3, r2
 80013d0:	b2d9      	uxtb	r1, r3
 80013d2:	183a      	adds	r2, r7, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	1c0a      	adds	r2, r1, #0
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e00c      	b.n	80013f8 <gde021a1_DrawImage+0x2f8>
              pixels_4_grey[j] |= 0x03;
 80013de:	2008      	movs	r0, #8
 80013e0:	183a      	adds	r2, r7, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	18d3      	adds	r3, r2, r3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2203      	movs	r2, #3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b2d9      	uxtb	r1, r3
 80013ee:	183a      	adds	r2, r7, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	18d3      	adds	r3, r2, r3
 80013f4:	1c0a      	adds	r2, r1, #0
 80013f6:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;
 80013f8:	220f      	movs	r2, #15
 80013fa:	18bb      	adds	r3, r7, r2
 80013fc:	18ba      	adds	r2, r7, r2
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	0852      	lsrs	r2, r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	3301      	adds	r3, #1
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d9d2      	bls.n	80013b6 <gde021a1_DrawImage+0x2b6>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8001410:	2108      	movs	r1, #8
 8001412:	187b      	adds	r3, r7, r1
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	019b      	lsls	r3, r3, #6
 8001418:	b25a      	sxtb	r2, r3
 800141a:	187b      	adds	r3, r7, r1
 800141c:	785b      	ldrb	r3, [r3, #1]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	b25b      	sxtb	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b25a      	sxtb	r2, r3
 8001426:	187b      	adds	r3, r7, r1
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b25a      	sxtb	r2, r3
 8001432:	187b      	adds	r3, r7, r1
 8001434:	78db      	ldrb	r3, [r3, #3]
 8001436:	b25b      	sxtb	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b25a      	sxtb	r2, r3
 800143c:	210d      	movs	r1, #13
 800143e:	187b      	adds	r3, r7, r1
 8001440:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 8001442:	187b      	adds	r3, r7, r1
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	0018      	movs	r0, r3
 800144a:	f000 f987 	bl	800175c <EPD_IO_WriteData>
 800144e:	e007      	b.n	8001460 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0xf0)
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2bf0      	cmp	r3, #240	; 0xf0
 8001458:	d102      	bne.n	8001460 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 800145a:	20ff      	movs	r0, #255	; 0xff
 800145c:	f000 f97e 	bl	800175c <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	003b      	movs	r3, r7
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	1cba      	adds	r2, r7, #2
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	0892      	lsrs	r2, r2, #2
 8001470:	b292      	uxth	r2, r2
 8001472:	3201      	adds	r2, #1
 8001474:	4353      	muls	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	da00      	bge.n	800147c <gde021a1_DrawImage+0x37c>
 800147a:	3301      	adds	r3, #1
 800147c:	105b      	asrs	r3, r3, #1
 800147e:	001a      	movs	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	4293      	cmp	r3, r2
 8001484:	d200      	bcs.n	8001488 <gde021a1_DrawImage+0x388>
 8001486:	e6f2      	b.n	800126e <gde021a1_DrawImage+0x16e>
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b006      	add	sp, #24
 800148e:	bdb0      	pop	{r4, r5, r7, pc}

08001490 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <SPIx_Init+0x74>)
 8001496:	0018      	movs	r0, r3
 8001498:	f002 f8d5 	bl	8003646 <HAL_SPI_GetState>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d12d      	bne.n	80014fc <SPIx_Init+0x6c>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <SPIx_Init+0x74>)
 80014a2:	4a19      	ldr	r2, [pc, #100]	; (8001508 <SPIx_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
    
    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Mode               = SPI_MODE_MASTER;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <SPIx_Init+0x74>)
 80014a8:	2282      	movs	r2, #130	; 0x82
 80014aa:	0052      	lsls	r2, r2, #1
 80014ac:	605a      	str	r2, [r3, #4]
    SpiHandle.Init.Direction          = SPI_DIRECTION_2LINES;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <SPIx_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.BaudRatePrescaler  = SPI_BAUDRATEPRESCALER_8;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <SPIx_Init+0x74>)
 80014b6:	2210      	movs	r2, #16
 80014b8:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.DataSize           = SPI_DATASIZE_8BIT;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <SPIx_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.CLKPhase           = SPI_PHASE_2EDGE;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <SPIx_Init+0x74>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity        = SPI_POLARITY_HIGH;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <SPIx_Init+0x74>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.FirstBit           = SPI_FIRSTBIT_MSB;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <SPIx_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS                = SPI_NSS_SOFT;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <SPIx_Init+0x74>)
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.CRCCalculation     = SPI_CRCCALCULATION_DISABLE;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <SPIx_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial      = 7;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SPIx_Init+0x74>)
 80014e2:	2207      	movs	r2, #7
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.TIMode             = SPI_TIMODE_DISABLE;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <SPIx_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
    
    SPIx_MspInit(&SpiHandle);
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SPIx_Init+0x74>)
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 f83a 	bl	8001568 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <SPIx_Init+0x74>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f001 fec4 	bl	8003284 <HAL_SPI_Init>
  }
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	20000064 	.word	0x20000064
 8001508:	40013000 	.word	0x40013000

0800150c <SPIx_Write>:
  * @brief  SPI Write a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint8_t Value)
{
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	0002      	movs	r2, r0
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001518:	250f      	movs	r5, #15
 800151a:	197b      	adds	r3, r7, r5
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SPIx_TIMEOUT_MAX);
 8001520:	197c      	adds	r4, r7, r5
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	1df9      	adds	r1, r7, #7
 8001528:	4807      	ldr	r0, [pc, #28]	; (8001548 <SPIx_Write+0x3c>)
 800152a:	2201      	movs	r2, #1
 800152c:	f001 ff3d 	bl	80033aa <HAL_SPI_Transmit>
 8001530:	0003      	movs	r3, r0
 8001532:	7023      	strb	r3, [r4, #0]

  /* Check the communication status */
  if(status != HAL_OK)
 8001534:	197b      	adds	r3, r7, r5
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SPIx_Write+0x34>
  {
    /* Re-Initiaize the BUS */
    SPIx_Error();
 800153c:	f000 f806 	bl	800154c <SPIx_Error>
  }
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b004      	add	sp, #16
 8001546:	bdb0      	pop	{r4, r5, r7, pc}
 8001548:	20000064 	.word	0x20000064

0800154c <SPIx_Error>:
  * @brief  SPI error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error (void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* De-Initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SPIx_Error+0x18>)
 8001552:	0018      	movs	r0, r3
 8001554:	f001 ff00 	bl	8003358 <HAL_SPI_DeInit>

  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 8001558:	f7ff ff9a 	bl	8001490 <SPIx_Init>
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	20000064 	.word	0x20000064

08001568 <SPIx_MspInit>:
  * @brief  SPI MSP Init
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <SPIx_MspInit+0x84>)
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <SPIx_MspInit+0x84>)
 8001576:	2102      	movs	r1, #2
 8001578:	430a      	orrs	r2, r1
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <SPIx_MspInit+0x84>)
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin = DISCOVERY_SPIx_SCK_PIN;
 8001588:	210c      	movs	r1, #12
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2208      	movs	r2, #8
 800158e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2202      	movs	r2, #2
 8001594:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2201      	movs	r2, #1
 800159a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2203      	movs	r2, #3
 80015a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = DISCOVERY_SPIx_AF;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStruct);
 80015a8:	000c      	movs	r4, r1
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <SPIx_MspInit+0x88>)
 80015ae:	0019      	movs	r1, r3
 80015b0:	0010      	movs	r0, r2
 80015b2:	f000 fa63 	bl	8001a7c <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin = DISCOVERY_SPIx_MOSI_PIN;
 80015b6:	0021      	movs	r1, r4
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2220      	movs	r2, #32
 80015bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = DISCOVERY_SPIx_AF;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2202      	movs	r2, #2
 80015c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStruct);
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <SPIx_MspInit+0x88>)
 80015ce:	0019      	movs	r1, r3
 80015d0:	0010      	movs	r0, r2
 80015d2:	f000 fa53 	bl	8001a7c <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SPIx_MspInit+0x84>)
 80015d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SPIx_MspInit+0x84>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	0149      	lsls	r1, r1, #5
 80015e0:	430a      	orrs	r2, r1
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b009      	add	sp, #36	; 0x24
 80015ea:	bd90      	pop	{r4, r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	50000400 	.word	0x50000400

080015f4 <EPD_IO_Init>:
  * @brief  Configures the EPD SPI interface.
  * @param  None
  * @retval None
  */
void EPD_IO_Init(void)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b08b      	sub	sp, #44	; 0x2c
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* EPD_CS_GPIO and EPD_DC_GPIO Periph clock enable */
  EPD_CS_GPIO_CLK_ENABLE();
 80015fa:	4b56      	ldr	r3, [pc, #344]	; (8001754 <EPD_IO_Init+0x160>)
 80015fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fe:	4b55      	ldr	r3, [pc, #340]	; (8001754 <EPD_IO_Init+0x160>)
 8001600:	2101      	movs	r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
 8001606:	4b53      	ldr	r3, [pc, #332]	; (8001754 <EPD_IO_Init+0x160>)
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	2201      	movs	r2, #1
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  EPD_DC_GPIO_CLK_ENABLE();
 8001612:	4b50      	ldr	r3, [pc, #320]	; (8001754 <EPD_IO_Init+0x160>)
 8001614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001616:	4b4f      	ldr	r3, [pc, #316]	; (8001754 <EPD_IO_Init+0x160>)
 8001618:	2102      	movs	r1, #2
 800161a:	430a      	orrs	r2, r1
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
 800161e:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <EPD_IO_Init+0x160>)
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  EPD_RESET_GPIO_CLK_ENABLE();
 800162a:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <EPD_IO_Init+0x160>)
 800162c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162e:	4b49      	ldr	r3, [pc, #292]	; (8001754 <EPD_IO_Init+0x160>)
 8001630:	2102      	movs	r1, #2
 8001632:	430a      	orrs	r2, r1
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <EPD_IO_Init+0x160>)
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  EPD_BUSY_GPIO_CLK_ENABLE();
 8001642:	4b44      	ldr	r3, [pc, #272]	; (8001754 <EPD_IO_Init+0x160>)
 8001644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001646:	4b43      	ldr	r3, [pc, #268]	; (8001754 <EPD_IO_Init+0x160>)
 8001648:	2101      	movs	r1, #1
 800164a:	430a      	orrs	r2, r1
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <EPD_IO_Init+0x160>)
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  EPD_PWR_GPIO_CLK_ENABLE();
 800165a:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <EPD_IO_Init+0x160>)
 800165c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <EPD_IO_Init+0x160>)
 8001660:	2102      	movs	r1, #2
 8001662:	430a      	orrs	r2, r1
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <EPD_IO_Init+0x160>)
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /* Configure EPD_CS_PIN pin: EPD Card CS pin */
  GPIO_InitStruct.Pin = EPD_CS_PIN;
 8001672:	2114      	movs	r1, #20
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	0212      	lsls	r2, r2, #8
 800167a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2201      	movs	r2, #1
 8001680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2203      	movs	r2, #3
 800168c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_CS_GPIO_PORT, &GPIO_InitStruct);
 800168e:	000c      	movs	r4, r1
 8001690:	187a      	adds	r2, r7, r1
 8001692:	23a0      	movs	r3, #160	; 0xa0
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	0011      	movs	r1, r2
 8001698:	0018      	movs	r0, r3
 800169a:	f000 f9ef 	bl	8001a7c <HAL_GPIO_Init>

  /* Configure EPD_DC_PIN pin: EPD Card DC pin */
  GPIO_InitStruct.Pin = EPD_DC_PIN;
 800169e:	0021      	movs	r1, r4
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_DC_GPIO_PORT, &GPIO_InitStruct);
 80016a8:	000c      	movs	r4, r1
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	4a2a      	ldr	r2, [pc, #168]	; (8001758 <EPD_IO_Init+0x164>)
 80016ae:	0019      	movs	r1, r3
 80016b0:	0010      	movs	r0, r2
 80016b2:	f000 f9e3 	bl	8001a7c <HAL_GPIO_Init>

  /* Configure EPD_RESET_PIN pin */
  GPIO_InitStruct.Pin = EPD_RESET_PIN;
 80016b6:	0021      	movs	r1, r4
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2204      	movs	r2, #4
 80016bc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_PWR_GPIO_PORT, &GPIO_InitStruct);
 80016be:	000c      	movs	r4, r1
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	4a25      	ldr	r2, [pc, #148]	; (8001758 <EPD_IO_Init+0x164>)
 80016c4:	0019      	movs	r1, r3
 80016c6:	0010      	movs	r0, r2
 80016c8:	f000 f9d8 	bl	8001a7c <HAL_GPIO_Init>

  /* Configure EPD_RESET_PIN pin */
  GPIO_InitStruct.Pin = EPD_PWR_PIN;
 80016cc:	0021      	movs	r1, r4
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	00d2      	lsls	r2, r2, #3
 80016d4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_RESET_GPIO_PORT, &GPIO_InitStruct);
 80016d6:	000c      	movs	r4, r1
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <EPD_IO_Init+0x164>)
 80016dc:	0019      	movs	r1, r3
 80016de:	0010      	movs	r0, r2
 80016e0:	f000 f9cc 	bl	8001a7c <HAL_GPIO_Init>

  /* Configure EPD_BUSY_PIN pin */
  GPIO_InitStruct.Pin = EPD_BUSY_PIN;
 80016e4:	0021      	movs	r1, r4
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	0052      	lsls	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2202      	movs	r2, #2
 80016f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EPD_BUSY_GPIO_PORT, &GPIO_InitStruct);
 80016fa:	187a      	adds	r2, r7, r1
 80016fc:	23a0      	movs	r3, #160	; 0xa0
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	0011      	movs	r1, r2
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f9ba 	bl	8001a7c <HAL_GPIO_Init>

  /* Enbale Display */
  EPD_PWR_LOW();
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4812      	ldr	r0, [pc, #72]	; (8001758 <EPD_IO_Init+0x164>)
 800170e:	2200      	movs	r2, #0
 8001710:	0019      	movs	r1, r3
 8001712:	f000 fc20 	bl	8001f56 <HAL_GPIO_WritePin>

  /* Set or Reset the control line */
  EPD_CS_LOW();
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	0219      	lsls	r1, r3, #8
 800171a:	23a0      	movs	r3, #160	; 0xa0
 800171c:	05db      	lsls	r3, r3, #23
 800171e:	2200      	movs	r2, #0
 8001720:	0018      	movs	r0, r3
 8001722:	f000 fc18 	bl	8001f56 <HAL_GPIO_WritePin>
  EPD_CS_HIGH();
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	0219      	lsls	r1, r3, #8
 800172a:	23a0      	movs	r3, #160	; 0xa0
 800172c:	05db      	lsls	r3, r3, #23
 800172e:	2201      	movs	r2, #1
 8001730:	0018      	movs	r0, r3
 8001732:	f000 fc10 	bl	8001f56 <HAL_GPIO_WritePin>

  /* EPD reset pin mamagement */
  EPD_RESET_HIGH();
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <EPD_IO_Init+0x164>)
 8001738:	2201      	movs	r2, #1
 800173a:	2104      	movs	r1, #4
 800173c:	0018      	movs	r0, r3
 800173e:	f000 fc0a 	bl	8001f56 <HAL_GPIO_WritePin>
  EPD_Delay(10);
 8001742:	200a      	movs	r0, #10
 8001744:	f000 f85c 	bl	8001800 <EPD_Delay>

  /* SPI Configuration */
  SPIx_Init();
 8001748:	f7ff fea2 	bl	8001490 <SPIx_Init>
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b00b      	add	sp, #44	; 0x2c
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	50000400 	.word	0x50000400

0800175c <EPD_IO_WriteData>:
  * @brief  Write register value.
  * @param  None
  * @retval None
  */
void EPD_IO_WriteData(uint16_t RegValue) 
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	0002      	movs	r2, r0
 8001764:	1dbb      	adds	r3, r7, #6
 8001766:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  EPD_CS_LOW();
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	0219      	lsls	r1, r3, #8
 800176c:	23a0      	movs	r3, #160	; 0xa0
 800176e:	05db      	lsls	r3, r3, #23
 8001770:	2200      	movs	r2, #0
 8001772:	0018      	movs	r0, r3
 8001774:	f000 fbef 	bl	8001f56 <HAL_GPIO_WritePin>

  /* Set EPD data/command line DC to High */
  EPD_DC_HIGH();
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <EPD_IO_WriteData+0x50>)
 800177e:	2201      	movs	r2, #1
 8001780:	0019      	movs	r1, r3
 8001782:	f000 fbe8 	bl	8001f56 <HAL_GPIO_WritePin>

  /* Send Data */
  SPIx_Write(RegValue);
 8001786:	1dbb      	adds	r3, r7, #6
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	0018      	movs	r0, r3
 800178e:	f7ff febd 	bl	800150c <SPIx_Write>

  /* Deselect: Chip Select high */
  EPD_CS_HIGH();
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	0219      	lsls	r1, r3, #8
 8001796:	23a0      	movs	r3, #160	; 0xa0
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	2201      	movs	r2, #1
 800179c:	0018      	movs	r0, r3
 800179e:	f000 fbda 	bl	8001f56 <HAL_GPIO_WritePin>
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	50000400 	.word	0x50000400

080017b0 <EPD_IO_WriteReg>:
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t Reg)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	0002      	movs	r2, r0
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  EPD_CS_LOW();
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	0219      	lsls	r1, r3, #8
 80017c0:	23a0      	movs	r3, #160	; 0xa0
 80017c2:	05db      	lsls	r3, r3, #23
 80017c4:	2200      	movs	r2, #0
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fbc5 	bl	8001f56 <HAL_GPIO_WritePin>
  
  /* Set EPD data/command line DC to Low */
  EPD_DC_LOW();
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	480a      	ldr	r0, [pc, #40]	; (80017fc <EPD_IO_WriteReg+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	0019      	movs	r1, r3
 80017d6:	f000 fbbe 	bl	8001f56 <HAL_GPIO_WritePin>

  /* Send Command */
  SPIx_Write(Reg);
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff fe94 	bl	800150c <SPIx_Write>

  /* Deselect: Chip Select high */
  EPD_CS_HIGH();
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	0219      	lsls	r1, r3, #8
 80017e8:	23a0      	movs	r3, #160	; 0xa0
 80017ea:	05db      	lsls	r3, r3, #23
 80017ec:	2201      	movs	r2, #1
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fbb1 	bl	8001f56 <HAL_GPIO_WritePin>
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	50000400 	.word	0x50000400

08001800 <EPD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_Delay (Delay);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f864 	bl	80018d8 <HAL_Delay>
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x3c>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_Init+0x3c>)
 800182a:	2140      	movs	r1, #64	; 0x40
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f811 	bl	8001858 <HAL_InitTick>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d003      	beq.n	8001842 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e001      	b.n	8001846 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001842:	f7ff f951 	bl	8000ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40022000 	.word	0x40022000

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001860:	230f      	movs	r3, #15
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_InitTick+0x50>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	23fa      	movs	r3, #250	; 0xfa
 800186e:	0099      	lsls	r1, r3, #2
 8001870:	0010      	movs	r0, r2
 8001872:	f7fe fc49 	bl	8000108 <__udivsi3>
 8001876:	0003      	movs	r3, r0
 8001878:	0018      	movs	r0, r3
 800187a:	f000 f8f2 	bl	8001a62 <HAL_SYSTICK_Config>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d004      	beq.n	800188c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8001882:	230f      	movs	r3, #15
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e006      	b.n	800189a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	2301      	movs	r3, #1
 8001890:	425b      	negs	r3, r3
 8001892:	2200      	movs	r2, #0
 8001894:	0018      	movs	r0, r3
 8001896:	f000 f8cf 	bl	8001a38 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800189a:	230f      	movs	r3, #15
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	781b      	ldrb	r3, [r3, #0]
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b004      	add	sp, #16
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  uwTick++;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_IncTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_IncTick+0x14>)
 80018b8:	601a      	str	r2, [r3, #0]
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20001108 	.word	0x20001108

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <HAL_GetTick+0x10>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	20001108 	.word	0x20001108

080018d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff fff0 	bl	80018c4 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3301      	adds	r3, #1
 80018f0:	d002      	beq.n	80018f8 <HAL_Delay+0x20>
  {
    wait++;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	f7ff ffe3 	bl	80018c4 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	429a      	cmp	r2, r3
 8001908:	d8f7      	bhi.n	80018fa <HAL_Delay+0x22>
  {
  }
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b004      	add	sp, #16
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	0002      	movs	r2, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b7f      	cmp	r3, #127	; 0x7f
 8001928:	d932      	bls.n	8001990 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192a:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <NVIC_SetPriority+0xd4>)
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	0019      	movs	r1, r3
 8001932:	230f      	movs	r3, #15
 8001934:	400b      	ands	r3, r1
 8001936:	3b08      	subs	r3, #8
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3306      	adds	r3, #6
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	18d3      	adds	r3, r2, r3
 8001940:	3304      	adds	r3, #4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1dfa      	adds	r2, r7, #7
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	0011      	movs	r1, r2
 800194a:	2203      	movs	r2, #3
 800194c:	400a      	ands	r2, r1
 800194e:	00d2      	lsls	r2, r2, #3
 8001950:	21ff      	movs	r1, #255	; 0xff
 8001952:	4091      	lsls	r1, r2
 8001954:	000a      	movs	r2, r1
 8001956:	43d2      	mvns	r2, r2
 8001958:	401a      	ands	r2, r3
 800195a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	019b      	lsls	r3, r3, #6
 8001960:	22ff      	movs	r2, #255	; 0xff
 8001962:	401a      	ands	r2, r3
 8001964:	1dfb      	adds	r3, r7, #7
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	2303      	movs	r3, #3
 800196c:	4003      	ands	r3, r0
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001972:	481d      	ldr	r0, [pc, #116]	; (80019e8 <NVIC_SetPriority+0xd4>)
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	001c      	movs	r4, r3
 800197a:	230f      	movs	r3, #15
 800197c:	4023      	ands	r3, r4
 800197e:	3b08      	subs	r3, #8
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	430a      	orrs	r2, r1
 8001984:	3306      	adds	r3, #6
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	18c3      	adds	r3, r0, r3
 800198a:	3304      	adds	r3, #4
 800198c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800198e:	e027      	b.n	80019e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <NVIC_SetPriority+0xd8>)
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b25b      	sxtb	r3, r3
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	33c0      	adds	r3, #192	; 0xc0
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	589b      	ldr	r3, [r3, r2]
 80019a0:	1dfa      	adds	r2, r7, #7
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	0011      	movs	r1, r2
 80019a6:	2203      	movs	r2, #3
 80019a8:	400a      	ands	r2, r1
 80019aa:	00d2      	lsls	r2, r2, #3
 80019ac:	21ff      	movs	r1, #255	; 0xff
 80019ae:	4091      	lsls	r1, r2
 80019b0:	000a      	movs	r2, r1
 80019b2:	43d2      	mvns	r2, r2
 80019b4:	401a      	ands	r2, r3
 80019b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	019b      	lsls	r3, r3, #6
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	401a      	ands	r2, r3
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	0018      	movs	r0, r3
 80019c6:	2303      	movs	r3, #3
 80019c8:	4003      	ands	r3, r0
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ce:	4807      	ldr	r0, [pc, #28]	; (80019ec <NVIC_SetPriority+0xd8>)
 80019d0:	1dfb      	adds	r3, r7, #7
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	430a      	orrs	r2, r1
 80019da:	33c0      	adds	r3, #192	; 0xc0
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	501a      	str	r2, [r3, r0]
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b003      	add	sp, #12
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	e000ed00 	.word	0xe000ed00
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <SysTick_Config+0x40>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e010      	b.n	8001a28 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <SysTick_Config+0x44>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	425b      	negs	r3, r3
 8001a12:	2103      	movs	r1, #3
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff ff7d 	bl	8001914 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <SysTick_Config+0x44>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SysTick_Config+0x44>)
 8001a22:	2207      	movs	r2, #7
 8001a24:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	00ffffff 	.word	0x00ffffff
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	210f      	movs	r1, #15
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	1c02      	adds	r2, r0, #0
 8001a48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	0011      	movs	r1, r2
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <NVIC_SetPriority>
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff ffbf 	bl	80019f0 <SysTick_Config>
 8001a72:	0003      	movs	r3, r0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a92:	e14f      	b.n	8001d34 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4091      	lsls	r1, r2
 8001a9e:	000a      	movs	r2, r1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d100      	bne.n	8001aac <HAL_GPIO_Init+0x30>
 8001aaa:	e140      	b.n	8001d2e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x40>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	58d3      	ldr	r3, [r2, r3]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2207      	movs	r2, #7
 8001ace:	4013      	ands	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2107      	movs	r1, #7
 8001ae8:	400b      	ands	r3, r1
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	409a      	lsls	r2, r3
 8001aee:	0013      	movs	r3, r2
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	6939      	ldr	r1, [r7, #16]
 8001b02:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d00b      	beq.n	8001b24 <HAL_GPIO_Init+0xa8>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b18:	2b11      	cmp	r3, #17
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b12      	cmp	r3, #18
 8001b22:	d130      	bne.n	8001b86 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	409a      	lsls	r2, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	43da      	mvns	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	409a      	lsls	r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	43da      	mvns	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	2201      	movs	r2, #1
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	409a      	lsls	r2, r3
 8001b94:	0013      	movs	r3, r2
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	0013      	movs	r3, r2
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	055b      	lsls	r3, r3, #21
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d100      	bne.n	8001bf8 <HAL_GPIO_Init+0x17c>
 8001bf6:	e09a      	b.n	8001d2e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf8:	4b54      	ldr	r3, [pc, #336]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001bfe:	2101      	movs	r1, #1
 8001c00:	430a      	orrs	r2, r1
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_GPIO_Init+0x2d4>)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	589b      	ldr	r3, [r3, r2]
 8001c10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2203      	movs	r2, #3
 8001c16:	4013      	ands	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	0013      	movs	r3, r2
 8001c20:	43da      	mvns	r2, r3
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	23a0      	movs	r3, #160	; 0xa0
 8001c2c:	05db      	lsls	r3, r3, #23
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x1ea>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a47      	ldr	r2, [pc, #284]	; (8001d54 <HAL_GPIO_Init+0x2d8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x1e6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a46      	ldr	r2, [pc, #280]	; (8001d58 <HAL_GPIO_Init+0x2dc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x1e2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a45      	ldr	r2, [pc, #276]	; (8001d5c <HAL_GPIO_Init+0x2e0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x1de>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <HAL_GPIO_Init+0x2e4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x1da>
 8001c52:	2305      	movs	r3, #5
 8001c54:	e008      	b.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e004      	b.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c66:	2300      	movs	r3, #0
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	4093      	lsls	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c78:	4935      	ldr	r1, [pc, #212]	; (8001d50 <HAL_GPIO_Init+0x2d4>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	029b      	lsls	r3, r3, #10
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	035b      	lsls	r3, r3, #13
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	039b      	lsls	r3, r3, #14
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	40da      	lsrs	r2, r3
 8001d3c:	1e13      	subs	r3, r2, #0
 8001d3e:	d000      	beq.n	8001d42 <HAL_GPIO_Init+0x2c6>
 8001d40:	e6a8      	b.n	8001a94 <HAL_GPIO_Init+0x18>
  }
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b006      	add	sp, #24
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	50000400 	.word	0x50000400
 8001d58:	50000800 	.word	0x50000800
 8001d5c:	50000c00 	.word	0x50000c00
 8001d60:	50001c00 	.word	0x50001c00
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001d7e:	e0b6      	b.n	8001eee <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001d80:	2201      	movs	r2, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	409a      	lsls	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d100      	bne.n	8001d94 <HAL_GPIO_DeInit+0x2c>
 8001d92:	e0a9      	b.n	8001ee8 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	4099      	lsls	r1, r3
 8001da0:	000b      	movs	r3, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
           
      /* Configure the default Alternate Function in current IO */ 
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	58d3      	ldr	r3, [r2, r3]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	2107      	movs	r1, #7
 8001db8:	400a      	ands	r2, r1
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	210f      	movs	r1, #15
 8001dbe:	4091      	lsls	r1, r2
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	43d1      	mvns	r1, r2
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	08d2      	lsrs	r2, r2, #3
 8001dc8:	4019      	ands	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	50d1      	str	r1, [r2, r3]
      
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	0052      	lsls	r2, r2, #1
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4091      	lsls	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	43d2      	mvns	r2, r2
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]
      
      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2101      	movs	r1, #1
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4091      	lsls	r1, r2
 8001df2:	000a      	movs	r2, r1
 8001df4:	43d2      	mvns	r2, r2
 8001df6:	401a      	ands	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]
      
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	0052      	lsls	r2, r2, #1
 8001e04:	2103      	movs	r1, #3
 8001e06:	4091      	lsls	r1, r2
 8001e08:	000a      	movs	r2, r1
 8001e0a:	43d2      	mvns	r2, r2
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <HAL_GPIO_DeInit+0x19c>)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	589b      	ldr	r3, [r3, r2]
 8001e1e:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2203      	movs	r2, #3
 8001e24:	4013      	ands	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	23a0      	movs	r3, #160	; 0xa0
 8001e36:	05db      	lsls	r3, r3, #23
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d019      	beq.n	8001e70 <HAL_GPIO_DeInit+0x108>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a32      	ldr	r2, [pc, #200]	; (8001f08 <HAL_GPIO_DeInit+0x1a0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <HAL_GPIO_DeInit+0x104>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a31      	ldr	r2, [pc, #196]	; (8001f0c <HAL_GPIO_DeInit+0x1a4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00d      	beq.n	8001e68 <HAL_GPIO_DeInit+0x100>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <HAL_GPIO_DeInit+0x1a8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d007      	beq.n	8001e64 <HAL_GPIO_DeInit+0xfc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a2f      	ldr	r2, [pc, #188]	; (8001f14 <HAL_GPIO_DeInit+0x1ac>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d101      	bne.n	8001e60 <HAL_GPIO_DeInit+0xf8>
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	e008      	b.n	8001e72 <HAL_GPIO_DeInit+0x10a>
 8001e60:	2306      	movs	r3, #6
 8001e62:	e006      	b.n	8001e72 <HAL_GPIO_DeInit+0x10a>
 8001e64:	2303      	movs	r3, #3
 8001e66:	e004      	b.n	8001e72 <HAL_GPIO_DeInit+0x10a>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e002      	b.n	8001e72 <HAL_GPIO_DeInit+0x10a>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_GPIO_DeInit+0x10a>
 8001e70:	2300      	movs	r3, #0
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	2103      	movs	r1, #3
 8001e76:	400a      	ands	r2, r1
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	4093      	lsls	r3, r2
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d132      	bne.n	8001ee8 <HAL_GPIO_DeInit+0x180>
      {
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2203      	movs	r2, #3
 8001e86:	4013      	ands	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	0013      	movs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_GPIO_DeInit+0x19c>)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	589a      	ldr	r2, [r3, r2]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43d9      	mvns	r1, r3
 8001ea2:	4818      	ldr	r0, [pc, #96]	; (8001f04 <HAL_GPIO_DeInit+0x19c>)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	3302      	adds	r3, #2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	501a      	str	r2, [r3, r0]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_GPIO_DeInit+0x1b0>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_GPIO_DeInit+0x1b0>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_GPIO_DeInit+0x1b0>)
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43d9      	mvns	r1, r3
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_GPIO_DeInit+0x1b0>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_GPIO_DeInit+0x1b0>)
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_GPIO_DeInit+0x1b0>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_GPIO_DeInit+0x1b0>)
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43d9      	mvns	r1, r3
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_GPIO_DeInit+0x1b0>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
      }
    }
     position++;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	40da      	lsrs	r2, r3
 8001ef4:	1e13      	subs	r3, r2, #0
 8001ef6:	d000      	beq.n	8001efa <HAL_GPIO_DeInit+0x192>
 8001ef8:	e742      	b.n	8001d80 <HAL_GPIO_DeInit+0x18>
  }
}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b006      	add	sp, #24
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40010000 	.word	0x40010000
 8001f08:	50000400 	.word	0x50000400
 8001f0c:	50000800 	.word	0x50000800
 8001f10:	50000c00 	.word	0x50000c00
 8001f14:	50001c00 	.word	0x50001c00
 8001f18:	40010400 	.word	0x40010400

08001f1c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	000a      	movs	r2, r1
 8001f26:	1cbb      	adds	r3, r7, #2
 8001f28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	1cba      	adds	r2, r7, #2
 8001f30:	8812      	ldrh	r2, [r2, #0]
 8001f32:	4013      	ands	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f36:	230f      	movs	r3, #15
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	e003      	b.n	8001f48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f40:	230f      	movs	r3, #15
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f48:	230f      	movs	r3, #15
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	0008      	movs	r0, r1
 8001f60:	0011      	movs	r1, r2
 8001f62:	1cbb      	adds	r3, r7, #2
 8001f64:	1c02      	adds	r2, r0, #0
 8001f66:	801a      	strh	r2, [r3, #0]
 8001f68:	1c7b      	adds	r3, r7, #1
 8001f6a:	1c0a      	adds	r2, r1, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001f6e:	1c7b      	adds	r3, r7, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	1cbb      	adds	r3, r7, #2
 8001f78:	881a      	ldrh	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001f7e:	e003      	b.n	8001f88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001f80:	1cbb      	adds	r3, r7, #2
 8001f82:	881a      	ldrh	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e082      	b.n	80020a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2241      	movs	r2, #65	; 0x41
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d107      	bne.n	8001fbe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7fe fb2d 	bl	8000618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2241      	movs	r2, #65	; 0x41
 8001fc2:	2124      	movs	r1, #36	; 0x24
 8001fc4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	438a      	bics	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4934      	ldr	r1, [pc, #208]	; (80020b0 <HAL_I2C_Init+0x120>)
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4931      	ldr	r1, [pc, #196]	; (80020b4 <HAL_I2C_Init+0x124>)
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d108      	bne.n	800200e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0209      	lsls	r1, r1, #8
 8002008:	430a      	orrs	r2, r1
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e007      	b.n	800201e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2184      	movs	r1, #132	; 0x84
 8002018:	0209      	lsls	r1, r1, #8
 800201a:	430a      	orrs	r2, r1
 800201c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d104      	bne.n	8002030 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	491f      	ldr	r1, [pc, #124]	; (80020b8 <HAL_I2C_Init+0x128>)
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	491a      	ldr	r1, [pc, #104]	; (80020b4 <HAL_I2C_Init+0x124>)
 800204c:	400a      	ands	r2, r1
 800204e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	431a      	orrs	r2, r3
 800205a:	0011      	movs	r1, r2
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	021a      	lsls	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69d9      	ldr	r1, [r3, #28]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2241      	movs	r2, #65	; 0x41
 8002094:	2120      	movs	r1, #32
 8002096:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2242      	movs	r2, #66	; 0x42
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	f0ffffff 	.word	0xf0ffffff
 80020b4:	ffff7fff 	.word	0xffff7fff
 80020b8:	02008000 	.word	0x02008000

080020bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	; 0x41
 80020ca:	5c9b      	ldrb	r3, [r3, r2]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d138      	bne.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2240      	movs	r2, #64	; 0x40
 80020d6:	5c9b      	ldrb	r3, [r3, r2]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020dc:	2302      	movs	r3, #2
 80020de:	e032      	b.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	2101      	movs	r1, #1
 80020e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2241      	movs	r2, #65	; 0x41
 80020ec:	2124      	movs	r1, #36	; 0x24
 80020ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4911      	ldr	r1, [pc, #68]	; (8002150 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800210c:	400a      	ands	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2241      	movs	r2, #65	; 0x41
 8002134:	2120      	movs	r1, #32
 8002136:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2240      	movs	r2, #64	; 0x40
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	ffffefff 	.word	0xffffefff

08002154 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2241      	movs	r2, #65	; 0x41
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	d139      	bne.n	80021de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002174:	2302      	movs	r3, #2
 8002176:	e033      	b.n	80021e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	2101      	movs	r1, #1
 800217e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2241      	movs	r2, #65	; 0x41
 8002184:	2124      	movs	r1, #36	; 0x24
 8002186:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2101      	movs	r1, #1
 8002194:	438a      	bics	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2241      	movs	r2, #65	; 0x41
 80021ce:	2120      	movs	r1, #32
 80021d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2240      	movs	r2, #64	; 0x40
 80021d6:	2100      	movs	r1, #0
 80021d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021de:	2302      	movs	r3, #2
  }
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	fffff0ff 	.word	0xfffff0ff

080021ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ee:	b08b      	sub	sp, #44	; 0x2c
 80021f0:	af06      	add	r7, sp, #24
 80021f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0e4      	b.n	80023c8 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a73      	ldr	r2, [pc, #460]	; (80023d0 <HAL_PCD_Init+0x1e4>)
 8002202:	5c9b      	ldrb	r3, [r3, r2]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	238a      	movs	r3, #138	; 0x8a
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	2100      	movs	r1, #0
 8002212:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f7fe fe4c 	bl	8000eb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a6c      	ldr	r2, [pc, #432]	; (80023d0 <HAL_PCD_Init+0x1e4>)
 8002220:	2103      	movs	r1, #3
 8002222:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0018      	movs	r0, r3
 800222a:	f002 f837 	bl	800429c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222e:	230f      	movs	r3, #15
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e043      	b.n	80022c0 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002238:	200f      	movs	r0, #15
 800223a:	183b      	adds	r3, r7, r0
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	2129      	movs	r1, #41	; 0x29
 8002242:	015b      	lsls	r3, r3, #5
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	185b      	adds	r3, r3, r1
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800224c:	183b      	adds	r3, r7, r0
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	2128      	movs	r1, #40	; 0x28
 8002254:	015b      	lsls	r3, r3, #5
 8002256:	18d3      	adds	r3, r2, r3
 8002258:	185b      	adds	r3, r3, r1
 800225a:	183a      	adds	r2, r7, r0
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002260:	183b      	adds	r3, r7, r0
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	183a      	adds	r2, r7, r0
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	b291      	uxth	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	015b      	lsls	r3, r3, #5
 800226e:	18d3      	adds	r3, r2, r3
 8002270:	3336      	adds	r3, #54	; 0x36
 8002272:	1c0a      	adds	r2, r1, #0
 8002274:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002276:	183b      	adds	r3, r7, r0
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	212b      	movs	r1, #43	; 0x2b
 800227e:	015b      	lsls	r3, r3, #5
 8002280:	18d3      	adds	r3, r2, r3
 8002282:	185b      	adds	r3, r3, r1
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002288:	183b      	adds	r3, r7, r0
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	015b      	lsls	r3, r3, #5
 8002290:	18d3      	adds	r3, r2, r3
 8002292:	3338      	adds	r3, #56	; 0x38
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002298:	183b      	adds	r3, r7, r0
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	015b      	lsls	r3, r3, #5
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	333c      	adds	r3, #60	; 0x3c
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022a8:	183b      	adds	r3, r7, r0
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3202      	adds	r2, #2
 80022b0:	0152      	lsls	r2, r2, #5
 80022b2:	2100      	movs	r1, #0
 80022b4:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b6:	183b      	adds	r3, r7, r0
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	3201      	adds	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	230f      	movs	r3, #15
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d3b4      	bcc.n	8002238 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ce:	230f      	movs	r3, #15
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e03f      	b.n	8002358 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022d8:	200f      	movs	r0, #15
 80022da:	183b      	adds	r3, r7, r0
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	232a      	movs	r3, #42	; 0x2a
 80022e2:	33ff      	adds	r3, #255	; 0xff
 80022e4:	0152      	lsls	r2, r2, #5
 80022e6:	188a      	adds	r2, r1, r2
 80022e8:	18d3      	adds	r3, r2, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	2394      	movs	r3, #148	; 0x94
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	0152      	lsls	r2, r2, #5
 80022fa:	188a      	adds	r2, r1, r2
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	183a      	adds	r2, r7, r0
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002304:	183b      	adds	r3, r7, r0
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	232c      	movs	r3, #44	; 0x2c
 800230c:	33ff      	adds	r3, #255	; 0xff
 800230e:	0152      	lsls	r2, r2, #5
 8002310:	188a      	adds	r2, r1, r2
 8002312:	18d3      	adds	r3, r2, r3
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002318:	183b      	adds	r3, r7, r0
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	239c      	movs	r3, #156	; 0x9c
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	0152      	lsls	r2, r2, #5
 8002324:	188a      	adds	r2, r1, r2
 8002326:	18d3      	adds	r3, r2, r3
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800232c:	183b      	adds	r3, r7, r0
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	239e      	movs	r3, #158	; 0x9e
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	0152      	lsls	r2, r2, #5
 8002338:	188a      	adds	r2, r1, r2
 800233a:	18d3      	adds	r3, r2, r3
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002340:	183b      	adds	r3, r7, r0
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	320a      	adds	r2, #10
 8002348:	0152      	lsls	r2, r2, #5
 800234a:	2100      	movs	r1, #0
 800234c:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234e:	183b      	adds	r3, r7, r0
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	183b      	adds	r3, r7, r0
 8002354:	3201      	adds	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	230f      	movs	r3, #15
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3b8      	bcc.n	80022d8 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	466a      	mov	r2, sp
 800236e:	0011      	movs	r1, r2
 8002370:	001a      	movs	r2, r3
 8002372:	3210      	adds	r2, #16
 8002374:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002376:	c170      	stmia	r1!, {r4, r5, r6}
 8002378:	ca30      	ldmia	r2!, {r4, r5}
 800237a:	c130      	stmia	r1!, {r4, r5}
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f001 ffab 	bl	80042dc <USB_DevInit>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_PCD_Init+0x1e4>)
 800238e:	2102      	movs	r1, #2
 8002390:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e018      	b.n	80023c8 <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2224      	movs	r2, #36	; 0x24
 800239a:	2100      	movs	r1, #0
 800239c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <HAL_PCD_Init+0x1e4>)
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d103      	bne.n	80023b6 <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f834 	bl	800241e <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d103      	bne.n	80023c6 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 f807 	bl	80023d4 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b005      	add	sp, #20
 80023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d0:	00000229 	.word	0x00000229

080023d4 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	239b      	movs	r3, #155	; 0x9b
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	2101      	movs	r1, #1
 80023ea:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2258      	movs	r2, #88	; 0x58
 80023f0:	5a9b      	ldrh	r3, [r3, r2]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2201      	movs	r2, #1
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b299      	uxth	r1, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2258      	movs	r2, #88	; 0x58
 80023fe:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2258      	movs	r2, #88	; 0x58
 8002404:	5a9b      	ldrh	r3, [r3, r2]
 8002406:	b29b      	uxth	r3, r3
 8002408:	2202      	movs	r2, #2
 800240a:	4313      	orrs	r3, r2
 800240c:	b299      	uxth	r1, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2258      	movs	r2, #88	; 0x58
 8002412:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b004      	add	sp, #16
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	239a      	movs	r3, #154	; 0x9a
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	2101      	movs	r1, #1
 8002434:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	2398      	movs	r3, #152	; 0x98
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	2100      	movs	r1, #0
 800243e:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2254      	movs	r2, #84	; 0x54
 8002444:	5a9b      	ldrh	r3, [r3, r2]
 8002446:	b29b      	uxth	r3, r3
 8002448:	2201      	movs	r2, #1
 800244a:	4313      	orrs	r3, r2
 800244c:	b299      	uxth	r1, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2254      	movs	r2, #84	; 0x54
 8002452:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2254      	movs	r2, #84	; 0x54
 8002458:	5a9b      	ldrh	r3, [r3, r2]
 800245a:	b29b      	uxth	r3, r3
 800245c:	2202      	movs	r2, #2
 800245e:	4313      	orrs	r3, r2
 8002460:	b299      	uxth	r1, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2254      	movs	r2, #84	; 0x54
 8002466:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b004      	add	sp, #16
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b5b0      	push	{r4, r5, r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d102      	bne.n	8002488 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	f000 fbab 	bl	8002bde <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002488:	4bce      	ldr	r3, [pc, #824]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	220c      	movs	r2, #12
 800248e:	4013      	ands	r3, r2
 8002490:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002492:	4bcc      	ldr	r3, [pc, #816]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	025b      	lsls	r3, r3, #9
 800249a:	4013      	ands	r3, r2
 800249c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	d100      	bne.n	80024aa <HAL_RCC_OscConfig+0x36>
 80024a8:	e07e      	b.n	80025a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d007      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x68>
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	025b      	lsls	r3, r3, #9
 80024bc:	429a      	cmp	r2, r3
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4bc0      	ldr	r3, [pc, #768]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	4013      	ands	r3, r2
 80024ca:	d100      	bne.n	80024ce <HAL_RCC_OscConfig+0x5a>
 80024cc:	e06b      	b.n	80025a6 <HAL_RCC_OscConfig+0x132>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d167      	bne.n	80025a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f000 fb81 	bl	8002bde <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	025b      	lsls	r3, r3, #9
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x84>
 80024e8:	4bb6      	ldr	r3, [pc, #728]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4bb5      	ldr	r3, [pc, #724]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0249      	lsls	r1, r1, #9
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e027      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	23a0      	movs	r3, #160	; 0xa0
 80024fe:	02db      	lsls	r3, r3, #11
 8002500:	429a      	cmp	r2, r3
 8002502:	d10e      	bne.n	8002522 <HAL_RCC_OscConfig+0xae>
 8002504:	4baf      	ldr	r3, [pc, #700]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4bae      	ldr	r3, [pc, #696]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	02c9      	lsls	r1, r1, #11
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	4bac      	ldr	r3, [pc, #688]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4bab      	ldr	r3, [pc, #684]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0249      	lsls	r1, r1, #9
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e012      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 8002522:	4ba8      	ldr	r3, [pc, #672]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4ba7      	ldr	r3, [pc, #668]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002528:	49a7      	ldr	r1, [pc, #668]	; (80027c8 <HAL_RCC_OscConfig+0x354>)
 800252a:	400a      	ands	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	4ba5      	ldr	r3, [pc, #660]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	4013      	ands	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4ba1      	ldr	r3, [pc, #644]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4ba0      	ldr	r3, [pc, #640]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002542:	49a2      	ldr	r1, [pc, #648]	; (80027cc <HAL_RCC_OscConfig+0x358>)
 8002544:	400a      	ands	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff f9b8 	bl	80018c4 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002558:	e009      	b.n	800256e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255a:	f7ff f9b3 	bl	80018c4 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	; 0x64
 8002566:	d902      	bls.n	800256e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	f000 fb38 	bl	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800256e:	4b95      	ldr	r3, [pc, #596]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	4013      	ands	r3, r2
 8002578:	d0ef      	beq.n	800255a <HAL_RCC_OscConfig+0xe6>
 800257a:	e015      	b.n	80025a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff f9a2 	bl	80018c4 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002586:	f7ff f99d 	bl	80018c4 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e322      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002598:	4b8a      	ldr	r3, [pc, #552]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	4013      	ands	r3, r2
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x112>
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2202      	movs	r2, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	d100      	bne.n	80025b4 <HAL_RCC_OscConfig+0x140>
 80025b2:	e08a      	b.n	80026ca <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d13d      	bne.n	8002642 <HAL_RCC_OscConfig+0x1ce>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d13a      	bne.n	8002642 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80025cc:	4b7d      	ldr	r3, [pc, #500]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2204      	movs	r2, #4
 80025d2:	4013      	ands	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_RCC_OscConfig+0x16c>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e2fe      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <HAL_RCC_OscConfig+0x35c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	021a      	lsls	r2, r3, #8
 80025f0:	4b74      	ldr	r3, [pc, #464]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025f6:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2209      	movs	r2, #9
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	4b70      	ldr	r3, [pc, #448]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002608:	f000 fc1e 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 800260c:	0001      	movs	r1, r0
 800260e:	4b6d      	ldr	r3, [pc, #436]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	220f      	movs	r2, #15
 8002616:	4013      	ands	r3, r2
 8002618:	4a6e      	ldr	r2, [pc, #440]	; (80027d4 <HAL_RCC_OscConfig+0x360>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	000a      	movs	r2, r1
 800261e:	40da      	lsrs	r2, r3
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_OscConfig+0x364>)
 8002622:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002624:	2513      	movs	r5, #19
 8002626:	197c      	adds	r4, r7, r5
 8002628:	2000      	movs	r0, #0
 800262a:	f7ff f915 	bl	8001858 <HAL_InitTick>
 800262e:	0003      	movs	r3, r0
 8002630:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002632:	197b      	adds	r3, r7, r5
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d047      	beq.n	80026ca <HAL_RCC_OscConfig+0x256>
      {
        return status;
 800263a:	2313      	movs	r3, #19
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	e2cd      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d027      	beq.n	8002698 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2209      	movs	r2, #9
 800264e:	4393      	bics	r3, r2
 8002650:	0019      	movs	r1, r3
 8002652:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7ff f933 	bl	80018c4 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002664:	f7ff f92e 	bl	80018c4 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e2b3      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002676:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2204      	movs	r2, #4
 800267c:	4013      	ands	r3, r2
 800267e:	d0f1      	beq.n	8002664 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_RCC_OscConfig+0x35c>)
 8002686:	4013      	ands	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	021a      	lsls	r2, r3, #8
 8002690:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002698:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800269e:	2101      	movs	r1, #1
 80026a0:	438a      	bics	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff f90e 	bl	80018c4 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ae:	f7ff f909 	bl	80018c4 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e28e      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026c0:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2204      	movs	r2, #4
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f1      	bne.n	80026ae <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2210      	movs	r2, #16
 80026d0:	4013      	ands	r3, r2
 80026d2:	d100      	bne.n	80026d6 <HAL_RCC_OscConfig+0x262>
 80026d4:	e09e      	b.n	8002814 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d13f      	bne.n	800275c <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x280>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e274      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a38      	ldr	r2, [pc, #224]	; (80027dc <HAL_RCC_OscConfig+0x368>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002708:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	0a19      	lsrs	r1, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	061a      	lsls	r2, r3, #24
 8002716:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	0b5b      	lsrs	r3, r3, #13
 8002722:	3301      	adds	r3, #1
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	0212      	lsls	r2, r2, #8
 8002728:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	210f      	movs	r1, #15
 8002732:	400b      	ands	r3, r1
 8002734:	4927      	ldr	r1, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x360>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_RCC_OscConfig+0x364>)
 800273c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800273e:	2513      	movs	r5, #19
 8002740:	197c      	adds	r4, r7, r5
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff f888 	bl	8001858 <HAL_InitTick>
 8002748:	0003      	movs	r3, r0
 800274a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800274c:	197b      	adds	r3, r7, r5
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05f      	beq.n	8002814 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002754:	2313      	movs	r3, #19
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	e240      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d03d      	beq.n	80027e0 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0049      	lsls	r1, r1, #1
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7ff f8a7 	bl	80018c4 <HAL_GetTick>
 8002776:	0003      	movs	r3, r0
 8002778:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800277c:	f7ff f8a2 	bl	80018c4 <HAL_GetTick>
 8002780:	0002      	movs	r2, r0
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e227      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4013      	ands	r3, r2
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_RCC_OscConfig+0x368>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	0a19      	lsrs	r1, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	061a      	lsls	r2, r3, #24
 80027bc:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <HAL_RCC_OscConfig+0x350>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	e027      	b.n	8002814 <HAL_RCC_OscConfig+0x3a0>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	fffeffff 	.word	0xfffeffff
 80027cc:	fffbffff 	.word	0xfffbffff
 80027d0:	ffffe0ff 	.word	0xffffe0ff
 80027d4:	08004998 	.word	0x08004998
 80027d8:	20000000 	.word	0x20000000
 80027dc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027e0:	4bbd      	ldr	r3, [pc, #756]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4bbc      	ldr	r3, [pc, #752]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80027e6:	49bd      	ldr	r1, [pc, #756]	; (8002adc <HAL_RCC_OscConfig+0x668>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff f86a 	bl	80018c4 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f6:	f7ff f865 	bl	80018c4 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1ea      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002808:	4bb3      	ldr	r3, [pc, #716]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4013      	ands	r3, r2
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2208      	movs	r2, #8
 800281a:	4013      	ands	r3, r2
 800281c:	d036      	beq.n	800288c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d019      	beq.n	800285a <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002826:	4bac      	ldr	r3, [pc, #688]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800282a:	4bab      	ldr	r3, [pc, #684]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7ff f847 	bl	80018c4 <HAL_GetTick>
 8002836:	0003      	movs	r3, r0
 8002838:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff f842 	bl	80018c4 <HAL_GetTick>
 8002840:	0002      	movs	r2, r0
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1c7      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800284e:	4ba2      	ldr	r3, [pc, #648]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	2202      	movs	r2, #2
 8002854:	4013      	ands	r3, r2
 8002856:	d0f1      	beq.n	800283c <HAL_RCC_OscConfig+0x3c8>
 8002858:	e018      	b.n	800288c <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285a:	4b9f      	ldr	r3, [pc, #636]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800285c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800285e:	4b9e      	ldr	r3, [pc, #632]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002860:	2101      	movs	r1, #1
 8002862:	438a      	bics	r2, r1
 8002864:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7ff f82d 	bl	80018c4 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002870:	f7ff f828 	bl	80018c4 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1ad      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002882:	4b95      	ldr	r3, [pc, #596]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002886:	2202      	movs	r2, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d1f1      	bne.n	8002870 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d100      	bne.n	8002898 <HAL_RCC_OscConfig+0x424>
 8002896:	e0af      	b.n	80029f8 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002898:	2327      	movs	r3, #39	; 0x27
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a0:	4b8d      	ldr	r3, [pc, #564]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80028a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	055b      	lsls	r3, r3, #21
 80028a8:	4013      	ands	r3, r2
 80028aa:	d10a      	bne.n	80028c2 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	4b8a      	ldr	r3, [pc, #552]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80028ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b0:	4b89      	ldr	r3, [pc, #548]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	0549      	lsls	r1, r1, #21
 80028b6:	430a      	orrs	r2, r1
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80028ba:	2327      	movs	r3, #39	; 0x27
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b87      	ldr	r3, [pc, #540]	; (8002ae0 <HAL_RCC_OscConfig+0x66c>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	d11a      	bne.n	8002904 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b84      	ldr	r3, [pc, #528]	; (8002ae0 <HAL_RCC_OscConfig+0x66c>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b83      	ldr	r3, [pc, #524]	; (8002ae0 <HAL_RCC_OscConfig+0x66c>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0049      	lsls	r1, r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028dc:	f7fe fff2 	bl	80018c4 <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7fe ffed 	bl	80018c4 <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b64      	cmp	r3, #100	; 0x64
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e172      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b79      	ldr	r3, [pc, #484]	; (8002ae0 <HAL_RCC_OscConfig+0x66c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4013      	ands	r3, r2
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x4ac>
 8002910:	4b71      	ldr	r3, [pc, #452]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002914:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	0049      	lsls	r1, r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	651a      	str	r2, [r3, #80]	; 0x50
 800291e:	e031      	b.n	8002984 <HAL_RCC_OscConfig+0x510>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10c      	bne.n	8002942 <HAL_RCC_OscConfig+0x4ce>
 8002928:	4b6b      	ldr	r3, [pc, #428]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800292a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800292c:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800292e:	496b      	ldr	r1, [pc, #428]	; (8002adc <HAL_RCC_OscConfig+0x668>)
 8002930:	400a      	ands	r2, r1
 8002932:	651a      	str	r2, [r3, #80]	; 0x50
 8002934:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002938:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800293a:	496a      	ldr	r1, [pc, #424]	; (8002ae4 <HAL_RCC_OscConfig+0x670>)
 800293c:	400a      	ands	r2, r1
 800293e:	651a      	str	r2, [r3, #80]	; 0x50
 8002940:	e020      	b.n	8002984 <HAL_RCC_OscConfig+0x510>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	23a0      	movs	r3, #160	; 0xa0
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	429a      	cmp	r2, r3
 800294c:	d10e      	bne.n	800296c <HAL_RCC_OscConfig+0x4f8>
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002952:	4b61      	ldr	r3, [pc, #388]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	00c9      	lsls	r1, r1, #3
 8002958:	430a      	orrs	r2, r1
 800295a:	651a      	str	r2, [r3, #80]	; 0x50
 800295c:	4b5e      	ldr	r3, [pc, #376]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800295e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002960:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	0049      	lsls	r1, r1, #1
 8002966:	430a      	orrs	r2, r1
 8002968:	651a      	str	r2, [r3, #80]	; 0x50
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0x510>
 800296c:	4b5a      	ldr	r3, [pc, #360]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800296e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002972:	495a      	ldr	r1, [pc, #360]	; (8002adc <HAL_RCC_OscConfig+0x668>)
 8002974:	400a      	ands	r2, r1
 8002976:	651a      	str	r2, [r3, #80]	; 0x50
 8002978:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800297a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800297c:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 800297e:	4959      	ldr	r1, [pc, #356]	; (8002ae4 <HAL_RCC_OscConfig+0x670>)
 8002980:	400a      	ands	r2, r1
 8002982:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7fe ff9a 	bl	80018c4 <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002994:	e009      	b.n	80029aa <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe ff95 	bl	80018c4 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	4a51      	ldr	r2, [pc, #324]	; (8002ae8 <HAL_RCC_OscConfig+0x674>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e119      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029aa:	4b4b      	ldr	r3, [pc, #300]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80029ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d0ef      	beq.n	8002996 <HAL_RCC_OscConfig+0x522>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7fe ff84 	bl	80018c4 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c0:	e009      	b.n	80029d6 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe ff7f 	bl	80018c4 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	4a46      	ldr	r2, [pc, #280]	; (8002ae8 <HAL_RCC_OscConfig+0x674>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e103      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80029d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d1ef      	bne.n	80029c2 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029e2:	2327      	movs	r3, #39	; 0x27
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ec:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80029ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 80029f2:	493e      	ldr	r1, [pc, #248]	; (8002aec <HAL_RCC_OscConfig+0x678>)
 80029f4:	400a      	ands	r2, r1
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	4013      	ands	r3, r2
 8002a00:	d049      	beq.n	8002a96 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d026      	beq.n	8002a58 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002a0a:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	635a      	str	r2, [r3, #52]	; 0x34
 8002a22:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <HAL_RCC_OscConfig+0x67c>)
 8002a24:	6a1a      	ldr	r2, [r3, #32]
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCC_OscConfig+0x67c>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	0189      	lsls	r1, r1, #6
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe ff48 	bl	80018c4 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3a:	f7fe ff43 	bl	80018c4 <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0c8      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2202      	movs	r2, #2
 8002a52:	4013      	ands	r3, r2
 8002a54:	d0f1      	beq.n	8002a3a <HAL_RCC_OscConfig+0x5c6>
 8002a56:	e01e      	b.n	8002a96 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	438a      	bics	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_OscConfig+0x67c>)
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCC_OscConfig+0x67c>)
 8002a6a:	4922      	ldr	r1, [pc, #136]	; (8002af4 <HAL_RCC_OscConfig+0x680>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe ff28 	bl	80018c4 <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a7a:	f7fe ff23 	bl	80018c4 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e0a8      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d1f1      	bne.n	8002a7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d100      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x62c>
 8002a9e:	e09d      	b.n	8002bdc <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d100      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x634>
 8002aa6:	e076      	b.n	8002b96 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d157      	bne.n	8002b60 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_RCC_OscConfig+0x664>)
 8002ab6:	4910      	ldr	r1, [pc, #64]	; (8002af8 <HAL_RCC_OscConfig+0x684>)
 8002ab8:	400a      	ands	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe ff02 	bl	80018c4 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ac4:	e01a      	b.n	8002afc <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fefd 	bl	80018c4 <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d913      	bls.n	8002afc <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e082      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	fffffeff 	.word	0xfffffeff
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	fffffbff 	.word	0xfffffbff
 8002ae8:	00001388 	.word	0x00001388
 8002aec:	efffffff 	.word	0xefffffff
 8002af0:	40010000 	.word	0x40010000
 8002af4:	ffffdfff 	.word	0xffffdfff
 8002af8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002afc:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	049b      	lsls	r3, r3, #18
 8002b04:	4013      	ands	r3, r2
 8002b06:	d1de      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a37      	ldr	r2, [pc, #220]	; (8002bec <HAL_RCC_OscConfig+0x778>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	431a      	orrs	r2, r3
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002b24:	430a      	orrs	r2, r1
 8002b26:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b28:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	0449      	lsls	r1, r1, #17
 8002b32:	430a      	orrs	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fec5 	bl	80018c4 <HAL_GetTick>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fec0 	bl	80018c4 <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e045      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b52:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	049b      	lsls	r3, r3, #18
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x6cc>
 8002b5e:	e03d      	b.n	8002bdc <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002b66:	4922      	ldr	r1, [pc, #136]	; (8002bf0 <HAL_RCC_OscConfig+0x77c>)
 8002b68:	400a      	ands	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe feaa 	bl	80018c4 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe fea5 	bl	80018c4 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e02a      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	049b      	lsls	r3, r3, #18
 8002b90:	4013      	ands	r3, r2
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x702>
 8002b94:	e022      	b.n	8002bdc <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e01d      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_RCC_OscConfig+0x774>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	025b      	lsls	r3, r3, #9
 8002bae:	401a      	ands	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d10f      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	23f0      	movs	r3, #240	; 0xf0
 8002bbc:	039b      	lsls	r3, r3, #14
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	23c0      	movs	r3, #192	; 0xc0
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	401a      	ands	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b00a      	add	sp, #40	; 0x28
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	40021000 	.word	0x40021000
 8002bec:	ff02ffff 	.word	0xff02ffff
 8002bf0:	feffffff 	.word	0xfeffffff

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e10d      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_ClockConfig+0x238>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d911      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_ClockConfig+0x238>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	4b82      	ldr	r3, [pc, #520]	; (8002e2c <HAL_RCC_ClockConfig+0x238>)
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c28:	4b80      	ldr	r3, [pc, #512]	; (8002e2c <HAL_RCC_ClockConfig+0x238>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0f4      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	4013      	ands	r3, r2
 8002c42:	d009      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b7a      	ldr	r3, [pc, #488]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	22f0      	movs	r2, #240	; 0xf0
 8002c4a:	4393      	bics	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	4b77      	ldr	r3, [pc, #476]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002c54:	430a      	orrs	r2, r1
 8002c56:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d100      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x70>
 8002c62:	e089      	b.n	8002d78 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6c:	4b70      	ldr	r3, [pc, #448]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	029b      	lsls	r3, r3, #10
 8002c74:	4013      	ands	r3, r2
 8002c76:	d120      	bne.n	8002cba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0d3      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	049b      	lsls	r3, r3, #18
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d114      	bne.n	8002cba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0c7      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c9c:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0bc      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002caa:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0b4      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	4b5d      	ldr	r3, [pc, #372]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	4393      	bics	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cce:	f7fe fdf9 	bl	80018c4 <HAL_GetTick>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d111      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cde:	e009      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fe fdf0 	bl	80018c4 <HAL_GetTick>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_RCC_ClockConfig+0x240>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e097      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	220c      	movs	r2, #12
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d1ef      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xec>
 8002d00:	e03a      	b.n	8002d78 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d111      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0a:	e009      	b.n	8002d20 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe fdda 	bl	80018c4 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	4a47      	ldr	r2, [pc, #284]	; (8002e34 <HAL_RCC_ClockConfig+0x240>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e081      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	220c      	movs	r2, #12
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d1ef      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x118>
 8002d2c:	e024      	b.n	8002d78 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d11b      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d36:	e009      	b.n	8002d4c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fe fdc4 	bl	80018c4 <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <HAL_RCC_ClockConfig+0x240>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e06b      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4c:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	220c      	movs	r2, #12
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d1ef      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x144>
 8002d58:	e00e      	b.n	8002d78 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7fe fdb3 	bl	80018c4 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <HAL_RCC_ClockConfig+0x240>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e05a      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d6e:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	220c      	movs	r2, #12
 8002d74:	4013      	ands	r3, r2
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_RCC_ClockConfig+0x238>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d211      	bcs.n	8002daa <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_RCC_ClockConfig+0x238>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4393      	bics	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <HAL_RCC_ClockConfig+0x238>)
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d98:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <HAL_RCC_ClockConfig+0x238>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4013      	ands	r3, r2
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e03c      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2204      	movs	r2, #4
 8002db0:	4013      	ands	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2208      	movs	r2, #8
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_RCC_ClockConfig+0x248>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	00da      	lsls	r2, r3, #3
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002de8:	f000 f82e 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002dec:	0001      	movs	r1, r0
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCC_ClockConfig+0x23c>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	220f      	movs	r2, #15
 8002df6:	4013      	ands	r3, r2
 8002df8:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <HAL_RCC_ClockConfig+0x24c>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	000a      	movs	r2, r1
 8002dfe:	40da      	lsrs	r2, r3
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_RCC_ClockConfig+0x250>)
 8002e02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002e04:	250b      	movs	r5, #11
 8002e06:	197c      	adds	r4, r7, r5
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fe fd25 	bl	8001858 <HAL_InitTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e12:	197b      	adds	r3, r7, r5
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002e1a:	230b      	movs	r3, #11
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b004      	add	sp, #16
 8002e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	00001388 	.word	0x00001388
 8002e38:	fffff8ff 	.word	0xfffff8ff
 8002e3c:	ffffc7ff 	.word	0xffffc7ff
 8002e40:	08004998 	.word	0x08004998
 8002e44:	20000000 	.word	0x20000000

08002e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	220c      	movs	r2, #12
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d00e      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x34>
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d00f      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d157      	bne.n	8002f16 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d002      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e72:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e74:	e05d      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002e76:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e78:	613b      	str	r3, [r7, #16]
      break;
 8002e7a:	e05a      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e7c:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e7e:	613b      	str	r3, [r7, #16]
      break;
 8002e80:	e057      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0c9b      	lsrs	r3, r3, #18
 8002e86:	220f      	movs	r2, #15
 8002e88:	4013      	ands	r3, r2
 8002e8a:	4a30      	ldr	r2, [pc, #192]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e8c:	5cd3      	ldrb	r3, [r2, r3]
 8002e8e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	0d9b      	lsrs	r3, r3, #22
 8002e94:	2203      	movs	r2, #3
 8002e96:	4013      	ands	r3, r2
 8002e98:	3301      	adds	r3, #1
 8002e9a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	025b      	lsls	r3, r3, #9
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d00f      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	000a      	movs	r2, r1
 8002eac:	0152      	lsls	r2, r2, #5
 8002eae:	1a52      	subs	r2, r2, r1
 8002eb0:	0193      	lsls	r3, r2, #6
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	185b      	adds	r3, r3, r1
 8002eb8:	025b      	lsls	r3, r3, #9
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fd f923 	bl	8000108 <__udivsi3>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e023      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d00f      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	000a      	movs	r2, r1
 8002ed6:	0152      	lsls	r2, r2, #5
 8002ed8:	1a52      	subs	r2, r2, r1
 8002eda:	0193      	lsls	r3, r2, #6
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	185b      	adds	r3, r3, r1
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f7fd f90e 	bl	8000108 <__udivsi3>
 8002eec:	0003      	movs	r3, r0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	e00e      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	000a      	movs	r2, r1
 8002ef6:	0152      	lsls	r2, r2, #5
 8002ef8:	1a52      	subs	r2, r2, r1
 8002efa:	0193      	lsls	r3, r2, #6
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	185b      	adds	r3, r3, r1
 8002f02:	029b      	lsls	r3, r3, #10
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fd f8fe 	bl	8000108 <__udivsi3>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	613b      	str	r3, [r7, #16]
      break;
 8002f14:	e00d      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0b5b      	lsrs	r3, r3, #13
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	4013      	ands	r3, r2
 8002f20:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	0212      	lsls	r2, r2, #8
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
      break;
 8002f30:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f32:	693b      	ldr	r3, [r7, #16]
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b006      	add	sp, #24
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	003d0900 	.word	0x003d0900
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	007a1200 	.word	0x007a1200
 8002f4c:	080049b0 	.word	0x080049b0

08002f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	20000000 	.word	0x20000000

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f68:	f7ff fff2 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f6c:	0001      	movs	r1, r0
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	2207      	movs	r2, #7
 8002f76:	4013      	ands	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	40d9      	lsrs	r1, r3
 8002f7e:	000b      	movs	r3, r1
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	080049a8 	.word	0x080049a8

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f94:	f7ff ffdc 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f98:	0001      	movs	r1, r0
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	0adb      	lsrs	r3, r3, #11
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	40d9      	lsrs	r1, r3
 8002faa:	000b      	movs	r3, r1
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	080049a8 	.word	0x080049a8

08002fbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d100      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x20>
 8002fda:	e0dd      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002fdc:	2317      	movs	r3, #23
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe4:	4b9c      	ldr	r3, [pc, #624]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	055b      	lsls	r3, r3, #21
 8002fec:	4013      	ands	r3, r2
 8002fee:	d10a      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b99      	ldr	r3, [pc, #612]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff4:	4b98      	ldr	r3, [pc, #608]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	0549      	lsls	r1, r1, #21
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ffe:	2317      	movs	r3, #23
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b95      	ldr	r3, [pc, #596]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d11a      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b92      	ldr	r3, [pc, #584]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b91      	ldr	r3, [pc, #580]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0049      	lsls	r1, r1, #1
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003020:	f7fe fc50 	bl	80018c4 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fe fc4b 	bl	80018c4 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b64      	cmp	r3, #100	; 0x64
 8003036:	d901      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e108      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	4b87      	ldr	r3, [pc, #540]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d0f0      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003048:	4b83      	ldr	r3, [pc, #524]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	23c0      	movs	r3, #192	; 0xc0
 800304e:	039b      	lsls	r3, r3, #14
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	23c0      	movs	r3, #192	; 0xc0
 800305a:	039b      	lsls	r3, r3, #14
 800305c:	4013      	ands	r3, r2
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	d107      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	23c0      	movs	r3, #192	; 0xc0
 800306a:	039b      	lsls	r3, r3, #14
 800306c:	4013      	ands	r3, r2
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d013      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	23c0      	movs	r3, #192	; 0xc0
 800307a:	029b      	lsls	r3, r3, #10
 800307c:	401a      	ands	r2, r3
 800307e:	23c0      	movs	r3, #192	; 0xc0
 8003080:	029b      	lsls	r3, r3, #10
 8003082:	429a      	cmp	r2, r3
 8003084:	d10a      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003086:	4b74      	ldr	r3, [pc, #464]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	029b      	lsls	r3, r3, #10
 800308e:	401a      	ands	r2, r3
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	029b      	lsls	r3, r3, #10
 8003094:	429a      	cmp	r2, r3
 8003096:	d101      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0d8      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800309c:	4b6e      	ldr	r3, [pc, #440]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800309e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030a0:	23c0      	movs	r3, #192	; 0xc0
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d049      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	23c0      	movs	r3, #192	; 0xc0
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	4013      	ands	r3, r2
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d004      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2220      	movs	r2, #32
 80030c4:	4013      	ands	r3, r2
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	23c0      	movs	r3, #192	; 0xc0
 80030ce:	029b      	lsls	r3, r3, #10
 80030d0:	4013      	ands	r3, r2
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d034      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	d02e      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030e4:	4b5c      	ldr	r3, [pc, #368]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	4a5d      	ldr	r2, [pc, #372]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ee:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f2:	4b59      	ldr	r3, [pc, #356]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	0309      	lsls	r1, r1, #12
 80030f8:	430a      	orrs	r2, r1
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fc:	4b56      	ldr	r3, [pc, #344]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003100:	4b55      	ldr	r3, [pc, #340]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003102:	4958      	ldr	r1, [pc, #352]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003104:	400a      	ands	r2, r1
 8003106:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003108:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4013      	ands	r3, r2
 8003116:	d014      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fbd4 	bl	80018c4 <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003120:	e009      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fe fbcf 	bl	80018c4 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	4a4e      	ldr	r2, [pc, #312]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e08b      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003136:	4b48      	ldr	r3, [pc, #288]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4013      	ands	r3, r2
 8003140:	d0ef      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	23c0      	movs	r3, #192	; 0xc0
 8003148:	029b      	lsls	r3, r3, #10
 800314a:	401a      	ands	r2, r3
 800314c:	23c0      	movs	r3, #192	; 0xc0
 800314e:	029b      	lsls	r3, r3, #10
 8003150:	429a      	cmp	r2, r3
 8003152:	d10c      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a44      	ldr	r2, [pc, #272]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	23c0      	movs	r3, #192	; 0xc0
 8003164:	039b      	lsls	r3, r3, #14
 8003166:	401a      	ands	r2, r3
 8003168:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	4b3a      	ldr	r3, [pc, #232]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003170:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	23c0      	movs	r3, #192	; 0xc0
 8003178:	029b      	lsls	r3, r3, #10
 800317a:	401a      	ands	r2, r3
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800317e:	430a      	orrs	r2, r1
 8003180:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003182:	2317      	movs	r3, #23
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800318e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003190:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003192:	4937      	ldr	r1, [pc, #220]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003194:	400a      	ands	r2, r1
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	4013      	ands	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a2:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	2203      	movs	r2, #3
 80031a8:	4393      	bics	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031b2:	430a      	orrs	r2, r1
 80031b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2202      	movs	r2, #2
 80031bc:	4013      	ands	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c4:	220c      	movs	r2, #12
 80031c6:	4393      	bics	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2204      	movs	r2, #4
 80031da:	4013      	ands	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	4a24      	ldr	r2, [pc, #144]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031ee:	430a      	orrs	r2, r1
 80031f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2208      	movs	r2, #8
 80031f8:	4013      	ands	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031fc:	4b16      	ldr	r3, [pc, #88]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800320c:	430a      	orrs	r2, r1
 800320e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2240      	movs	r2, #64	; 0x40
 8003216:	4013      	ands	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003220:	4013      	ands	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1a      	ldr	r2, [r3, #32]
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800322a:	430a      	orrs	r2, r1
 800322c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	4013      	ands	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800323e:	4013      	ands	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003248:	430a      	orrs	r2, r1
 800324a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b006      	add	sp, #24
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
 8003260:	fffcffff 	.word	0xfffcffff
 8003264:	fff7ffff 	.word	0xfff7ffff
 8003268:	00001388 	.word	0x00001388
 800326c:	ffcfffff 	.word	0xffcfffff
 8003270:	efffffff 	.word	0xefffffff
 8003274:	fffff3ff 	.word	0xfffff3ff
 8003278:	ffffcfff 	.word	0xffffcfff
 800327c:	fbffffff 	.word	0xfbffffff
 8003280:	fff3ffff 	.word	0xfff3ffff

08003284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e059      	b.n	800334a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2251      	movs	r2, #81	; 0x51
 80032a0:	5c9b      	ldrb	r3, [r3, r2]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2250      	movs	r2, #80	; 0x50
 80032ac:	2100      	movs	r1, #0
 80032ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fd fb3c 	bl	8000930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2251      	movs	r2, #81	; 0x51
 80032bc:	2102      	movs	r1, #2
 80032be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2140      	movs	r1, #64	; 0x40
 80032cc:	438a      	bics	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6999      	ldr	r1, [r3, #24]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	400b      	ands	r3, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	0011      	movs	r1, r2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	2204      	movs	r2, #4
 800331a:	4013      	ands	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <HAL_SPI_Init+0xd0>)
 8003336:	400a      	ands	r2, r1
 8003338:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2251      	movs	r2, #81	; 0x51
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	fffff7ff 	.word	0xfffff7ff

08003358 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e01b      	b.n	80033a2 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2251      	movs	r2, #81	; 0x51
 800336e:	2102      	movs	r1, #2
 8003370:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2140      	movs	r1, #64	; 0x40
 800337e:	438a      	bics	r2, r1
 8003380:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	0018      	movs	r0, r3
 8003386:	f7fd fb6f 	bl	8000a68 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2251      	movs	r2, #81	; 0x51
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2250      	movs	r2, #80	; 0x50
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b002      	add	sp, #8
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b088      	sub	sp, #32
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	1dbb      	adds	r3, r7, #6
 80033b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ba:	231f      	movs	r3, #31
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2250      	movs	r2, #80	; 0x50
 80033c6:	5c9b      	ldrb	r3, [r3, r2]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_SPI_Transmit+0x26>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e136      	b.n	800363e <HAL_SPI_Transmit+0x294>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2250      	movs	r2, #80	; 0x50
 80033d4:	2101      	movs	r1, #1
 80033d6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033d8:	f7fe fa74 	bl	80018c4 <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033e0:	2316      	movs	r3, #22
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	1dba      	adds	r2, r7, #6
 80033e6:	8812      	ldrh	r2, [r2, #0]
 80033e8:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2251      	movs	r2, #81	; 0x51
 80033ee:	5c9b      	ldrb	r3, [r3, r2]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d004      	beq.n	8003400 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80033f6:	231f      	movs	r3, #31
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	2202      	movs	r2, #2
 80033fc:	701a      	strb	r2, [r3, #0]
    goto error;
 80033fe:	e113      	b.n	8003628 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_SPI_Transmit+0x64>
 8003406:	1dbb      	adds	r3, r7, #6
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d104      	bne.n	8003418 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800340e:	231f      	movs	r3, #31
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
    goto error;
 8003416:	e107      	b.n	8003628 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2251      	movs	r2, #81	; 0x51
 800341c:	2103      	movs	r1, #3
 800341e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1dba      	adds	r2, r7, #6
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1dba      	adds	r2, r7, #6
 8003438:	8812      	ldrh	r2, [r2, #0]
 800343a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	429a      	cmp	r2, r3
 8003464:	d108      	bne.n	8003478 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	01c9      	lsls	r1, r1, #7
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	4013      	ands	r3, r2
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d007      	beq.n	8003496 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2140      	movs	r1, #64	; 0x40
 8003492:	430a      	orrs	r2, r1
 8003494:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	429a      	cmp	r2, r3
 80034a0:	d14e      	bne.n	8003540 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <HAL_SPI_Transmit+0x10a>
 80034aa:	2316      	movs	r3, #22
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d13f      	bne.n	8003534 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	881a      	ldrh	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	1c9a      	adds	r2, r3, #2
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034d8:	e02c      	b.n	8003534 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2202      	movs	r2, #2
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d112      	bne.n	800350e <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	1c9a      	adds	r2, r3, #2
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	86da      	strh	r2, [r3, #54]	; 0x36
 800350c:	e012      	b.n	8003534 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800350e:	f7fe f9d9 	bl	80018c4 <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d802      	bhi.n	8003524 <HAL_SPI_Transmit+0x17a>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	d102      	bne.n	800352a <HAL_SPI_Transmit+0x180>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 800352a:	231f      	movs	r3, #31
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2203      	movs	r2, #3
 8003530:	701a      	strb	r2, [r3, #0]
          goto error;
 8003532:	e079      	b.n	8003628 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1cd      	bne.n	80034da <HAL_SPI_Transmit+0x130>
 800353e:	e04f      	b.n	80035e0 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d004      	beq.n	8003552 <HAL_SPI_Transmit+0x1a8>
 8003548:	2316      	movs	r3, #22
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d141      	bne.n	80035d6 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003578:	e02d      	b.n	80035d6 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d113      	bne.n	80035b0 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	330c      	adds	r3, #12
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80035ae:	e012      	b.n	80035d6 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b0:	f7fe f988 	bl	80018c4 <HAL_GetTick>
 80035b4:	0002      	movs	r2, r0
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d802      	bhi.n	80035c6 <HAL_SPI_Transmit+0x21c>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x222>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80035cc:	231f      	movs	r3, #31
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2203      	movs	r2, #3
 80035d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80035d4:	e028      	b.n	8003628 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1cc      	bne.n	800357a <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 f8aa 	bl	8003740 <SPI_EndRxTxTransaction>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800361c:	231f      	movs	r3, #31
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e000      	b.n	8003628 <HAL_SPI_Transmit+0x27e>
  }

error:
 8003626:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2251      	movs	r2, #81	; 0x51
 800362c:	2101      	movs	r1, #1
 800362e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2250      	movs	r2, #80	; 0x50
 8003634:	2100      	movs	r1, #0
 8003636:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003638:	231f      	movs	r3, #31
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	781b      	ldrb	r3, [r3, #0]
}
 800363e:	0018      	movs	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	b008      	add	sp, #32
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2251      	movs	r2, #81	; 0x51
 8003652:	5c9b      	ldrb	r3, [r3, r2]
 8003654:	b2db      	uxtb	r3, r3
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003670:	e050      	b.n	8003714 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	d04d      	beq.n	8003714 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003678:	f7fe f924 	bl	80018c4 <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d902      	bls.n	800368e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d142      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	21e0      	movs	r1, #224	; 0xe0
 800369a:	438a      	bics	r2, r1
 800369c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	2382      	movs	r3, #130	; 0x82
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d113      	bne.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d005      	beq.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	429a      	cmp	r2, r3
 80036c0:	d107      	bne.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2140      	movs	r1, #64	; 0x40
 80036ce:	438a      	bics	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	019b      	lsls	r3, r3, #6
 80036da:	429a      	cmp	r2, r3
 80036dc:	d110      	bne.n	8003700 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4914      	ldr	r1, [pc, #80]	; (800373c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80036ea:	400a      	ands	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	0189      	lsls	r1, r1, #6
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2251      	movs	r2, #81	; 0x51
 8003704:	2101      	movs	r1, #1
 8003706:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2250      	movs	r2, #80	; 0x50
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e00f      	b.n	8003734 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	425a      	negs	r2, r3
 8003724:	4153      	adcs	r3, r2
 8003726:	b2db      	uxtb	r3, r3
 8003728:	001a      	movs	r2, r3
 800372a:	1dfb      	adds	r3, r7, #7
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d19f      	bne.n	8003672 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b004      	add	sp, #16
 800373a:	bd80      	pop	{r7, pc}
 800373c:	ffffdfff 	.word	0xffffdfff

08003740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	2382      	movs	r3, #130	; 0x82
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	429a      	cmp	r2, r3
 8003756:	d112      	bne.n	800377e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	0013      	movs	r3, r2
 8003762:	2200      	movs	r2, #0
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	f7ff ff7b 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 800376a:	1e03      	subs	r3, r0, #0
 800376c:	d020      	beq.n	80037b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	2220      	movs	r2, #32
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e019      	b.n	80037b2 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2251      	movs	r2, #81	; 0x51
 8003782:	5c9b      	ldrb	r3, [r3, r2]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b05      	cmp	r3, #5
 8003788:	d112      	bne.n	80037b0 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	0013      	movs	r3, r2
 8003794:	2200      	movs	r2, #0
 8003796:	2101      	movs	r1, #1
 8003798:	f7ff ff62 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d007      	beq.n	80037b0 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	2220      	movs	r2, #32
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e000      	b.n	80037b2 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80037ba:	b590      	push	{r4, r7, lr}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e075      	b.n	80038b8 <HAL_TSC_Init+0xfe>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	223c      	movs	r2, #60	; 0x3c
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	223d      	movs	r2, #61	; 0x3d
 80037dc:	2100      	movs	r1, #0
 80037de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7fd fa30 	bl	8000c48 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	223c      	movs	r2, #60	; 0x3c
 80037ec:	2102      	movs	r1, #2
 80037ee:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003806:	431a      	orrs	r2, r3
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800380e:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003814:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800381a:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8003820:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8003826:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800382c:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if ((FunctionalState)htsc->Init.SpreadSpectrum == ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <HAL_TSC_Init+0x98>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2180      	movs	r1, #128	; 0x80
 800384c:	0249      	lsls	r1, r1, #9
 800384e:	430a      	orrs	r2, r1
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (uint32_t)(~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	43d2      	mvns	r2, r2
 8003868:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003882:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681c      	ldr	r4, [r3, #0]
 800388c:	0010      	movs	r0, r2
 800388e:	f000 f817 	bl	80038c0 <TSC_extract_groups>
 8003892:	0003      	movs	r3, r0
 8003894:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2103      	movs	r1, #3
 80038a2:	438a      	bics	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2203      	movs	r2, #3
 80038ac:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	223c      	movs	r2, #60	; 0x3c
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b003      	add	sp, #12
 80038be:	bd90      	pop	{r4, r7, pc}

080038c0 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	e011      	b.n	80038f6 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	220f      	movs	r2, #15
 80038d8:	409a      	lsls	r2, r3
 80038da:	0013      	movs	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4013      	ands	r3, r2
 80038e0:	d006      	beq.n	80038f0 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80038e2:	2201      	movs	r2, #1
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	409a      	lsls	r2, r3
 80038e8:	0013      	movs	r3, r2
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b07      	cmp	r3, #7
 80038fa:	d9ea      	bls.n	80038d2 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80038fc:	68fb      	ldr	r3, [r7, #12]
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e044      	b.n	80039a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391e:	2b00      	cmp	r3, #0
 8003920:	d107      	bne.n	8003932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2270      	movs	r2, #112	; 0x70
 8003926:	2100      	movs	r1, #0
 8003928:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f7fd fa57 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2224      	movs	r2, #36	; 0x24
 8003936:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	438a      	bics	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 f830 	bl	80039b0 <UART_SetConfig>
 8003950:	0003      	movs	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e024      	b.n	80039a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0018      	movs	r0, r3
 8003966:	f000 fb3b 	bl	8003fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	490d      	ldr	r1, [pc, #52]	; (80039ac <HAL_UART_Init+0xa4>)
 8003976:	400a      	ands	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	212a      	movs	r1, #42	; 0x2a
 8003986:	438a      	bics	r2, r1
 8003988:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 fbd3 	bl	8004148 <UART_CheckIdleState>
 80039a2:	0003      	movs	r3, r0
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	ffffb7ff 	.word	0xffffb7ff

080039b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80039b8:	231b      	movs	r3, #27
 80039ba:	2218      	movs	r2, #24
 80039bc:	4694      	mov	ip, r2
 80039be:	44bc      	add	ip, r7
 80039c0:	4463      	add	r3, ip
 80039c2:	2210      	movs	r2, #16
 80039c4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80039ca:	2313      	movs	r3, #19
 80039cc:	2218      	movs	r2, #24
 80039ce:	4694      	mov	ip, r2
 80039d0:	44bc      	add	ip, r7
 80039d2:	4463      	add	r3, ip
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4ac8      	ldr	r2, [pc, #800]	; (8003d1c <UART_SetConfig+0x36c>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	0019      	movs	r1, r3
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4ac3      	ldr	r2, [pc, #780]	; (8003d20 <UART_SetConfig+0x370>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	0019      	movs	r1, r3
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4abd      	ldr	r2, [pc, #756]	; (8003d24 <UART_SetConfig+0x374>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4ab9      	ldr	r2, [pc, #740]	; (8003d28 <UART_SetConfig+0x378>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4ab5      	ldr	r2, [pc, #724]	; (8003d2c <UART_SetConfig+0x37c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d134      	bne.n	8003ac6 <UART_SetConfig+0x116>
 8003a5c:	4bb4      	ldr	r3, [pc, #720]	; (8003d30 <UART_SetConfig+0x380>)
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a60:	2203      	movs	r2, #3
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d015      	beq.n	8003a94 <UART_SetConfig+0xe4>
 8003a68:	d304      	bcc.n	8003a74 <UART_SetConfig+0xc4>
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d00a      	beq.n	8003a84 <UART_SetConfig+0xd4>
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d018      	beq.n	8003aa4 <UART_SetConfig+0xf4>
 8003a72:	e01f      	b.n	8003ab4 <UART_SetConfig+0x104>
 8003a74:	231b      	movs	r3, #27
 8003a76:	2218      	movs	r2, #24
 8003a78:	4694      	mov	ip, r2
 8003a7a:	44bc      	add	ip, r7
 8003a7c:	4463      	add	r3, ip
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e0ab      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003a84:	231b      	movs	r3, #27
 8003a86:	2218      	movs	r2, #24
 8003a88:	4694      	mov	ip, r2
 8003a8a:	44bc      	add	ip, r7
 8003a8c:	4463      	add	r3, ip
 8003a8e:	2202      	movs	r2, #2
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e0a3      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003a94:	231b      	movs	r3, #27
 8003a96:	2218      	movs	r2, #24
 8003a98:	4694      	mov	ip, r2
 8003a9a:	44bc      	add	ip, r7
 8003a9c:	4463      	add	r3, ip
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	e09b      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003aa4:	231b      	movs	r3, #27
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	4694      	mov	ip, r2
 8003aaa:	44bc      	add	ip, r7
 8003aac:	4463      	add	r3, ip
 8003aae:	2208      	movs	r2, #8
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e093      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003ab4:	231b      	movs	r3, #27
 8003ab6:	2218      	movs	r2, #24
 8003ab8:	4694      	mov	ip, r2
 8003aba:	44bc      	add	ip, r7
 8003abc:	4463      	add	r3, ip
 8003abe:	2210      	movs	r2, #16
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	e08a      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a9a      	ldr	r2, [pc, #616]	; (8003d34 <UART_SetConfig+0x384>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d137      	bne.n	8003b40 <UART_SetConfig+0x190>
 8003ad0:	4b97      	ldr	r3, [pc, #604]	; (8003d30 <UART_SetConfig+0x380>)
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad4:	220c      	movs	r2, #12
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d018      	beq.n	8003b0e <UART_SetConfig+0x15e>
 8003adc:	d802      	bhi.n	8003ae4 <UART_SetConfig+0x134>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <UART_SetConfig+0x13e>
 8003ae2:	e024      	b.n	8003b2e <UART_SetConfig+0x17e>
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d00a      	beq.n	8003afe <UART_SetConfig+0x14e>
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d018      	beq.n	8003b1e <UART_SetConfig+0x16e>
 8003aec:	e01f      	b.n	8003b2e <UART_SetConfig+0x17e>
 8003aee:	231b      	movs	r3, #27
 8003af0:	2218      	movs	r2, #24
 8003af2:	4694      	mov	ip, r2
 8003af4:	44bc      	add	ip, r7
 8003af6:	4463      	add	r3, ip
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e06e      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003afe:	231b      	movs	r3, #27
 8003b00:	2218      	movs	r2, #24
 8003b02:	4694      	mov	ip, r2
 8003b04:	44bc      	add	ip, r7
 8003b06:	4463      	add	r3, ip
 8003b08:	2202      	movs	r2, #2
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e066      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003b0e:	231b      	movs	r3, #27
 8003b10:	2218      	movs	r2, #24
 8003b12:	4694      	mov	ip, r2
 8003b14:	44bc      	add	ip, r7
 8003b16:	4463      	add	r3, ip
 8003b18:	2204      	movs	r2, #4
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e05e      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003b1e:	231b      	movs	r3, #27
 8003b20:	2218      	movs	r2, #24
 8003b22:	4694      	mov	ip, r2
 8003b24:	44bc      	add	ip, r7
 8003b26:	4463      	add	r3, ip
 8003b28:	2208      	movs	r2, #8
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e056      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003b2e:	231b      	movs	r3, #27
 8003b30:	2218      	movs	r2, #24
 8003b32:	4694      	mov	ip, r2
 8003b34:	44bc      	add	ip, r7
 8003b36:	4463      	add	r3, ip
 8003b38:	2210      	movs	r2, #16
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	e04d      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a77      	ldr	r2, [pc, #476]	; (8003d24 <UART_SetConfig+0x374>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d141      	bne.n	8003bce <UART_SetConfig+0x21e>
 8003b4a:	4b79      	ldr	r3, [pc, #484]	; (8003d30 <UART_SetConfig+0x380>)
 8003b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b4e:	23c0      	movs	r3, #192	; 0xc0
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	4013      	ands	r3, r2
 8003b54:	2280      	movs	r2, #128	; 0x80
 8003b56:	00d2      	lsls	r2, r2, #3
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01f      	beq.n	8003b9c <UART_SetConfig+0x1ec>
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	00d2      	lsls	r2, r2, #3
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d802      	bhi.n	8003b6a <UART_SetConfig+0x1ba>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <UART_SetConfig+0x1cc>
 8003b68:	e028      	b.n	8003bbc <UART_SetConfig+0x20c>
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00c      	beq.n	8003b8c <UART_SetConfig+0x1dc>
 8003b72:	22c0      	movs	r2, #192	; 0xc0
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <UART_SetConfig+0x1fc>
 8003b7a:	e01f      	b.n	8003bbc <UART_SetConfig+0x20c>
 8003b7c:	231b      	movs	r3, #27
 8003b7e:	2218      	movs	r2, #24
 8003b80:	4694      	mov	ip, r2
 8003b82:	44bc      	add	ip, r7
 8003b84:	4463      	add	r3, ip
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e027      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003b8c:	231b      	movs	r3, #27
 8003b8e:	2218      	movs	r2, #24
 8003b90:	4694      	mov	ip, r2
 8003b92:	44bc      	add	ip, r7
 8003b94:	4463      	add	r3, ip
 8003b96:	2202      	movs	r2, #2
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	e01f      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003b9c:	231b      	movs	r3, #27
 8003b9e:	2218      	movs	r2, #24
 8003ba0:	4694      	mov	ip, r2
 8003ba2:	44bc      	add	ip, r7
 8003ba4:	4463      	add	r3, ip
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	e017      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003bac:	231b      	movs	r3, #27
 8003bae:	2218      	movs	r2, #24
 8003bb0:	4694      	mov	ip, r2
 8003bb2:	44bc      	add	ip, r7
 8003bb4:	4463      	add	r3, ip
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e00f      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003bbc:	231b      	movs	r3, #27
 8003bbe:	2218      	movs	r2, #24
 8003bc0:	4694      	mov	ip, r2
 8003bc2:	44bc      	add	ip, r7
 8003bc4:	4463      	add	r3, ip
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	e006      	b.n	8003bdc <UART_SetConfig+0x22c>
 8003bce:	231b      	movs	r3, #27
 8003bd0:	2218      	movs	r2, #24
 8003bd2:	4694      	mov	ip, r2
 8003bd4:	44bc      	add	ip, r7
 8003bd6:	4463      	add	r3, ip
 8003bd8:	2210      	movs	r2, #16
 8003bda:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <UART_SetConfig+0x374>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d000      	beq.n	8003be8 <UART_SetConfig+0x238>
 8003be6:	e083      	b.n	8003cf0 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003be8:	231b      	movs	r3, #27
 8003bea:	2218      	movs	r2, #24
 8003bec:	4694      	mov	ip, r2
 8003bee:	44bc      	add	ip, r7
 8003bf0:	4463      	add	r3, ip
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d00d      	beq.n	8003c14 <UART_SetConfig+0x264>
 8003bf8:	dc02      	bgt.n	8003c00 <UART_SetConfig+0x250>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <UART_SetConfig+0x25a>
 8003bfe:	e01d      	b.n	8003c3c <UART_SetConfig+0x28c>
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d012      	beq.n	8003c2a <UART_SetConfig+0x27a>
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d015      	beq.n	8003c34 <UART_SetConfig+0x284>
 8003c08:	e018      	b.n	8003c3c <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003c0a:	f7ff f9ab 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c12:	e01b      	b.n	8003c4c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c14:	4b46      	ldr	r3, [pc, #280]	; (8003d30 <UART_SetConfig+0x380>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d002      	beq.n	8003c24 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <UART_SetConfig+0x388>)
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8003c22:	e013      	b.n	8003c4c <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003c24:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <UART_SetConfig+0x38c>)
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c28:	e010      	b.n	8003c4c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7ff f90d 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c32:	e00b      	b.n	8003c4c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c3a:	e007      	b.n	8003c4c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c3c:	2313      	movs	r3, #19
 8003c3e:	2218      	movs	r2, #24
 8003c40:	4694      	mov	ip, r2
 8003c42:	44bc      	add	ip, r7
 8003c44:	4463      	add	r3, ip
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
        break;
 8003c4a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d100      	bne.n	8003c54 <UART_SetConfig+0x2a4>
 8003c52:	e1a6      	b.n	8003fa2 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	0013      	movs	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d305      	bcc.n	8003c70 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d907      	bls.n	8003c80 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8003c70:	2313      	movs	r3, #19
 8003c72:	2218      	movs	r2, #24
 8003c74:	4694      	mov	ip, r2
 8003c76:	44bc      	add	ip, r7
 8003c78:	4463      	add	r3, ip
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e190      	b.n	8003fa2 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	000b      	movs	r3, r1
 8003c8e:	0e1b      	lsrs	r3, r3, #24
 8003c90:	0010      	movs	r0, r2
 8003c92:	0205      	lsls	r5, r0, #8
 8003c94:	431d      	orrs	r5, r3
 8003c96:	000b      	movs	r3, r1
 8003c98:	021c      	lsls	r4, r3, #8
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68b8      	ldr	r0, [r7, #8]
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	1900      	adds	r0, r0, r4
 8003cac:	4169      	adcs	r1, r5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f7fc fab0 	bl	8000220 <__aeabi_uldivmod>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	000c      	movs	r4, r1
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <UART_SetConfig+0x390>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d908      	bls.n	8003ce0 <UART_SetConfig+0x330>
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <UART_SetConfig+0x394>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d804      	bhi.n	8003ce0 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	e160      	b.n	8003fa2 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8003ce0:	2313      	movs	r3, #19
 8003ce2:	2218      	movs	r2, #24
 8003ce4:	4694      	mov	ip, r2
 8003ce6:	44bc      	add	ip, r7
 8003ce8:	4463      	add	r3, ip
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	e158      	b.n	8003fa2 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d000      	beq.n	8003cfe <UART_SetConfig+0x34e>
 8003cfc:	e0c3      	b.n	8003e86 <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8003cfe:	231b      	movs	r3, #27
 8003d00:	2218      	movs	r2, #24
 8003d02:	4694      	mov	ip, r2
 8003d04:	44bc      	add	ip, r7
 8003d06:	4463      	add	r3, ip
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d900      	bls.n	8003d10 <UART_SetConfig+0x360>
 8003d0e:	e086      	b.n	8003e1e <UART_SetConfig+0x46e>
 8003d10:	009a      	lsls	r2, r3, #2
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <UART_SetConfig+0x398>)
 8003d14:	18d3      	adds	r3, r2, r3
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	469f      	mov	pc, r3
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	efff69f3 	.word	0xefff69f3
 8003d20:	ffffcfff 	.word	0xffffcfff
 8003d24:	40004800 	.word	0x40004800
 8003d28:	fffff4ff 	.word	0xfffff4ff
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40004400 	.word	0x40004400
 8003d38:	003d0900 	.word	0x003d0900
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	000002ff 	.word	0x000002ff
 8003d44:	000fffff 	.word	0x000fffff
 8003d48:	08007fec 	.word	0x08007fec
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d4c:	f7ff f90a 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8003d50:	0003      	movs	r3, r0
 8003d52:	005a      	lsls	r2, r3, #1
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	18d2      	adds	r2, r2, r3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	0019      	movs	r1, r3
 8003d62:	0010      	movs	r0, r2
 8003d64:	f7fc f9d0 	bl	8000108 <__udivsi3>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d6e:	e05e      	b.n	8003e2e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d70:	f7ff f90e 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 8003d74:	0003      	movs	r3, r0
 8003d76:	005a      	lsls	r2, r3, #1
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	18d2      	adds	r2, r2, r3
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0019      	movs	r1, r3
 8003d86:	0010      	movs	r0, r2
 8003d88:	f7fc f9be 	bl	8000108 <__udivsi3>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d92:	e04c      	b.n	8003e2e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d94:	4b8b      	ldr	r3, [pc, #556]	; (8003fc4 <UART_SetConfig+0x614>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2210      	movs	r2, #16
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	4a88      	ldr	r2, [pc, #544]	; (8003fc8 <UART_SetConfig+0x618>)
 8003da6:	189a      	adds	r2, r3, r2
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	0019      	movs	r1, r3
 8003dae:	0010      	movs	r0, r2
 8003db0:	f7fc f9aa 	bl	8000108 <__udivsi3>
 8003db4:	0003      	movs	r3, r0
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003dba:	e038      	b.n	8003e2e <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	4a82      	ldr	r2, [pc, #520]	; (8003fcc <UART_SetConfig+0x61c>)
 8003dc4:	189a      	adds	r2, r3, r2
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0019      	movs	r1, r3
 8003dcc:	0010      	movs	r0, r2
 8003dce:	f7fc f99b 	bl	8000108 <__udivsi3>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dd8:	e029      	b.n	8003e2e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003dda:	f7ff f835 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8003dde:	0003      	movs	r3, r0
 8003de0:	005a      	lsls	r2, r3, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	18d2      	adds	r2, r2, r3
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	0019      	movs	r1, r3
 8003df0:	0010      	movs	r0, r2
 8003df2:	f7fc f989 	bl	8000108 <__udivsi3>
 8003df6:	0003      	movs	r3, r0
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dfc:	e017      	b.n	8003e2e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	0252      	lsls	r2, r2, #9
 8003e08:	189a      	adds	r2, r3, r2
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	0019      	movs	r1, r3
 8003e10:	0010      	movs	r0, r2
 8003e12:	f7fc f979 	bl	8000108 <__udivsi3>
 8003e16:	0003      	movs	r3, r0
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e1c:	e007      	b.n	8003e2e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003e1e:	2313      	movs	r3, #19
 8003e20:	2218      	movs	r2, #24
 8003e22:	4694      	mov	ip, r2
 8003e24:	44bc      	add	ip, r7
 8003e26:	4463      	add	r3, ip
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
        break;
 8003e2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b0f      	cmp	r3, #15
 8003e32:	d920      	bls.n	8003e76 <UART_SetConfig+0x4c6>
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	4a66      	ldr	r2, [pc, #408]	; (8003fd0 <UART_SetConfig+0x620>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d81c      	bhi.n	8003e76 <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	200a      	movs	r0, #10
 8003e42:	2418      	movs	r4, #24
 8003e44:	193b      	adds	r3, r7, r4
 8003e46:	181b      	adds	r3, r3, r0
 8003e48:	210f      	movs	r1, #15
 8003e4a:	438a      	bics	r2, r1
 8003e4c:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2207      	movs	r2, #7
 8003e56:	4013      	ands	r3, r2
 8003e58:	b299      	uxth	r1, r3
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	181b      	adds	r3, r3, r0
 8003e5e:	193a      	adds	r2, r7, r4
 8003e60:	1812      	adds	r2, r2, r0
 8003e62:	8812      	ldrh	r2, [r2, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	193a      	adds	r2, r7, r4
 8003e6e:	1812      	adds	r2, r2, r0
 8003e70:	8812      	ldrh	r2, [r2, #0]
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	e095      	b.n	8003fa2 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8003e76:	2313      	movs	r3, #19
 8003e78:	2218      	movs	r2, #24
 8003e7a:	4694      	mov	ip, r2
 8003e7c:	44bc      	add	ip, r7
 8003e7e:	4463      	add	r3, ip
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e08d      	b.n	8003fa2 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 8003e86:	231b      	movs	r3, #27
 8003e88:	2218      	movs	r2, #24
 8003e8a:	4694      	mov	ip, r2
 8003e8c:	44bc      	add	ip, r7
 8003e8e:	4463      	add	r3, ip
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d86a      	bhi.n	8003f6c <UART_SetConfig+0x5bc>
 8003e96:	009a      	lsls	r2, r3, #2
 8003e98:	4b4e      	ldr	r3, [pc, #312]	; (8003fd4 <UART_SetConfig+0x624>)
 8003e9a:	18d3      	adds	r3, r2, r3
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003ea0:	f7ff f860 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	18d2      	adds	r2, r2, r3
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	f7fc f927 	bl	8000108 <__udivsi3>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ec0:	e05c      	b.n	8003f7c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ec2:	f7ff f865 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	18d2      	adds	r2, r2, r3
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	0010      	movs	r0, r2
 8003ed8:	f7fc f916 	bl	8000108 <__udivsi3>
 8003edc:	0003      	movs	r3, r0
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ee2:	e04b      	b.n	8003f7c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ee4:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <UART_SetConfig+0x614>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2210      	movs	r2, #16
 8003eea:	4013      	ands	r3, r2
 8003eec:	d00e      	beq.n	8003f0c <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	4a38      	ldr	r2, [pc, #224]	; (8003fd8 <UART_SetConfig+0x628>)
 8003ef6:	189a      	adds	r2, r3, r2
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	0019      	movs	r1, r3
 8003efe:	0010      	movs	r0, r2
 8003f00:	f7fc f902 	bl	8000108 <__udivsi3>
 8003f04:	0003      	movs	r3, r0
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003f0a:	e037      	b.n	8003f7c <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <UART_SetConfig+0x62c>)
 8003f14:	189a      	adds	r2, r3, r2
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	0010      	movs	r0, r2
 8003f1e:	f7fc f8f3 	bl	8000108 <__udivsi3>
 8003f22:	0003      	movs	r3, r0
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f28:	e028      	b.n	8003f7c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f2a:	f7fe ff8d 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	18d2      	adds	r2, r2, r3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	0010      	movs	r0, r2
 8003f40:	f7fc f8e2 	bl	8000108 <__udivsi3>
 8003f44:	0003      	movs	r3, r0
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f4a:	e017      	b.n	8003f7c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	0212      	lsls	r2, r2, #8
 8003f56:	189a      	adds	r2, r3, r2
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	0010      	movs	r0, r2
 8003f60:	f7fc f8d2 	bl	8000108 <__udivsi3>
 8003f64:	0003      	movs	r3, r0
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f6a:	e007      	b.n	8003f7c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f6c:	2313      	movs	r3, #19
 8003f6e:	2218      	movs	r2, #24
 8003f70:	4694      	mov	ip, r2
 8003f72:	44bc      	add	ip, r7
 8003f74:	4463      	add	r3, ip
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
        break;
 8003f7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d908      	bls.n	8003f94 <UART_SetConfig+0x5e4>
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <UART_SetConfig+0x620>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d804      	bhi.n	8003f94 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	e006      	b.n	8003fa2 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8003f94:	2313      	movs	r3, #19
 8003f96:	2218      	movs	r2, #24
 8003f98:	4694      	mov	ip, r2
 8003f9a:	44bc      	add	ip, r7
 8003f9c:	4463      	add	r3, ip
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2200      	movs	r2, #0
 8003fac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003fae:	2313      	movs	r3, #19
 8003fb0:	2218      	movs	r2, #24
 8003fb2:	4694      	mov	ip, r2
 8003fb4:	44bc      	add	ip, r7
 8003fb6:	4463      	add	r3, ip
 8003fb8:	781b      	ldrb	r3, [r3, #0]
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b00e      	add	sp, #56	; 0x38
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	007a1200 	.word	0x007a1200
 8003fcc:	01e84800 	.word	0x01e84800
 8003fd0:	0000ffff 	.word	0x0000ffff
 8003fd4:	08008010 	.word	0x08008010
 8003fd8:	003d0900 	.word	0x003d0900
 8003fdc:	00f42400 	.word	0x00f42400

08003fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	2201      	movs	r2, #1
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d00b      	beq.n	800400a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4a4a      	ldr	r2, [pc, #296]	; (8004124 <UART_AdvFeatureConfig+0x144>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	2202      	movs	r2, #2
 8004010:	4013      	ands	r3, r2
 8004012:	d00b      	beq.n	800402c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <UART_AdvFeatureConfig+0x148>)
 800401c:	4013      	ands	r3, r2
 800401e:	0019      	movs	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2204      	movs	r2, #4
 8004032:	4013      	ands	r3, r2
 8004034:	d00b      	beq.n	800404e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a3b      	ldr	r2, [pc, #236]	; (800412c <UART_AdvFeatureConfig+0x14c>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2208      	movs	r2, #8
 8004054:	4013      	ands	r3, r2
 8004056:	d00b      	beq.n	8004070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a34      	ldr	r2, [pc, #208]	; (8004130 <UART_AdvFeatureConfig+0x150>)
 8004060:	4013      	ands	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2210      	movs	r2, #16
 8004076:	4013      	ands	r3, r2
 8004078:	d00b      	beq.n	8004092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a2c      	ldr	r2, [pc, #176]	; (8004134 <UART_AdvFeatureConfig+0x154>)
 8004082:	4013      	ands	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2220      	movs	r2, #32
 8004098:	4013      	ands	r3, r2
 800409a:	d00b      	beq.n	80040b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4a25      	ldr	r2, [pc, #148]	; (8004138 <UART_AdvFeatureConfig+0x158>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	0019      	movs	r1, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	2240      	movs	r2, #64	; 0x40
 80040ba:	4013      	ands	r3, r2
 80040bc:	d01d      	beq.n	80040fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <UART_AdvFeatureConfig+0x15c>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	0019      	movs	r1, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	035b      	lsls	r3, r3, #13
 80040de:	429a      	cmp	r2, r3
 80040e0:	d10b      	bne.n	80040fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a15      	ldr	r2, [pc, #84]	; (8004140 <UART_AdvFeatureConfig+0x160>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	4013      	ands	r3, r2
 8004102:	d00b      	beq.n	800411c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <UART_AdvFeatureConfig+0x164>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}
 8004124:	fffdffff 	.word	0xfffdffff
 8004128:	fffeffff 	.word	0xfffeffff
 800412c:	fffbffff 	.word	0xfffbffff
 8004130:	ffff7fff 	.word	0xffff7fff
 8004134:	ffffefff 	.word	0xffffefff
 8004138:	ffffdfff 	.word	0xffffdfff
 800413c:	ffefffff 	.word	0xffefffff
 8004140:	ff9fffff 	.word	0xff9fffff
 8004144:	fff7ffff 	.word	0xfff7ffff

08004148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004156:	f7fd fbb5 	bl	80018c4 <HAL_GetTick>
 800415a:	0003      	movs	r3, r0
 800415c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2208      	movs	r2, #8
 8004166:	4013      	ands	r3, r2
 8004168:	2b08      	cmp	r3, #8
 800416a:	d10d      	bne.n	8004188 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	0399      	lsls	r1, r3, #14
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <UART_CheckIdleState+0x88>)
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	0013      	movs	r3, r2
 800417a:	2200      	movs	r2, #0
 800417c:	f000 f82a 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d001      	beq.n	8004188 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e01f      	b.n	80041c8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2204      	movs	r2, #4
 8004190:	4013      	ands	r3, r2
 8004192:	2b04      	cmp	r3, #4
 8004194:	d10d      	bne.n	80041b2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	03d9      	lsls	r1, r3, #15
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <UART_CheckIdleState+0x88>)
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	0013      	movs	r3, r2
 80041a4:	2200      	movs	r2, #0
 80041a6:	f000 f815 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d001      	beq.n	80041b2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e00a      	b.n	80041c8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2270      	movs	r2, #112	; 0x70
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	01ffffff 	.word	0x01ffffff

080041d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e4:	e029      	b.n	800423a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3301      	adds	r3, #1
 80041ea:	d026      	beq.n	800423a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ec:	f7fd fb6a 	bl	80018c4 <HAL_GetTick>
 80041f0:	0002      	movs	r2, r0
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <UART_WaitOnFlagUntilTimeout+0x2e>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11b      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4915      	ldr	r1, [pc, #84]	; (8004264 <UART_WaitOnFlagUntilTimeout+0x90>)
 800420e:	400a      	ands	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	438a      	bics	r2, r1
 8004220:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2270      	movs	r2, #112	; 0x70
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e00f      	b.n	800425a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	425a      	negs	r2, r3
 800424a:	4153      	adcs	r3, r2
 800424c:	b2db      	uxtb	r3, r3
 800424e:	001a      	movs	r2, r3
 8004250:	1dfb      	adds	r3, r7, #7
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d0c6      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	fffffe5f 	.word	0xfffffe5f

08004268 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004270:	210e      	movs	r1, #14
 8004272:	187b      	adds	r3, r7, r1
 8004274:	4a08      	ldr	r2, [pc, #32]	; (8004298 <USB_EnableGlobalInt+0x30>)
 8004276:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2240      	movs	r2, #64	; 0x40
 800427c:	5a9b      	ldrh	r3, [r3, r2]
 800427e:	b29a      	uxth	r2, r3
 8004280:	187b      	adds	r3, r7, r1
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	4313      	orrs	r3, r2
 8004286:	b299      	uxth	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2240      	movs	r2, #64	; 0x40
 800428c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b004      	add	sp, #16
 8004296:	bd80      	pop	{r7, pc}
 8004298:	ffffbf80 	.word	0xffffbf80

0800429c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042a4:	210e      	movs	r1, #14
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <USB_DisableGlobalInt+0x3c>)
 80042aa:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2240      	movs	r2, #64	; 0x40
 80042b0:	5a9b      	ldrh	r3, [r3, r2]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	b21b      	sxth	r3, r3
 80042b6:	187a      	adds	r2, r7, r1
 80042b8:	2100      	movs	r1, #0
 80042ba:	5e52      	ldrsh	r2, [r2, r1]
 80042bc:	43d2      	mvns	r2, r2
 80042be:	b212      	sxth	r2, r2
 80042c0:	4013      	ands	r3, r2
 80042c2:	b21b      	sxth	r3, r3
 80042c4:	b299      	uxth	r1, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2240      	movs	r2, #64	; 0x40
 80042ca:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	ffffbf80 	.word	0xffffbf80

080042dc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042dc:	b084      	sub	sp, #16
 80042de:	b590      	push	{r4, r7, lr}
 80042e0:	46c6      	mov	lr, r8
 80042e2:	b500      	push	{lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	2004      	movs	r0, #4
 80042ec:	2410      	movs	r4, #16
 80042ee:	46a4      	mov	ip, r4
 80042f0:	2408      	movs	r4, #8
 80042f2:	46a0      	mov	r8, r4
 80042f4:	44b8      	add	r8, r7
 80042f6:	44c4      	add	ip, r8
 80042f8:	4460      	add	r0, ip
 80042fa:	6001      	str	r1, [r0, #0]
 80042fc:	6042      	str	r2, [r0, #4]
 80042fe:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2240      	movs	r2, #64	; 0x40
 8004304:	2101      	movs	r1, #1
 8004306:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	2100      	movs	r1, #0
 800430e:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2244      	movs	r2, #68	; 0x44
 8004314:	2100      	movs	r1, #0
 8004316:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2250      	movs	r2, #80	; 0x50
 800431c:	2100      	movs	r1, #0
 800431e:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f7ff ffa0 	bl	8004268 <USB_EnableGlobalInt>

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bc04      	pop	{r2}
 8004332:	4690      	mov	r8, r2
 8004334:	bc90      	pop	{r4, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	b004      	add	sp, #16
 800433a:	4718      	bx	r3

0800433c <clear_paper_screen>:

static sFONT * pFont = &Font12;


uint8_t screen_paper_memory[3096] = {0};
void clear_paper_screen (void) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
	for (uint16_t num_cell = 0; num_cell < 3096; num_cell++){
 8004342:	1dbb      	adds	r3, r7, #6
 8004344:	2200      	movs	r2, #0
 8004346:	801a      	strh	r2, [r3, #0]
 8004348:	e009      	b.n	800435e <clear_paper_screen+0x22>
		screen_paper_memory[num_cell] = 0xFF;
 800434a:	1dbb      	adds	r3, r7, #6
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <clear_paper_screen+0x34>)
 8004350:	21ff      	movs	r1, #255	; 0xff
 8004352:	54d1      	strb	r1, [r2, r3]
	for (uint16_t num_cell = 0; num_cell < 3096; num_cell++){
 8004354:	1dbb      	adds	r3, r7, #6
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	1dbb      	adds	r3, r7, #6
 800435a:	3201      	adds	r2, #1
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	1dbb      	adds	r3, r7, #6
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	4a04      	ldr	r2, [pc, #16]	; (8004374 <clear_paper_screen+0x38>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d9f0      	bls.n	800434a <clear_paper_screen+0xe>
	}
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b002      	add	sp, #8
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200000bc 	.word	0x200000bc
 8004374:	00000c17 	.word	0x00000c17

08004378 <write_pixel>:
void write_pixel (uint16_t x_value, uint16_t y_value, uint8_t color) {
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	0004      	movs	r4, r0
 8004380:	0008      	movs	r0, r1
 8004382:	0011      	movs	r1, r2
 8004384:	1dbb      	adds	r3, r7, #6
 8004386:	1c22      	adds	r2, r4, #0
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	1c02      	adds	r2, r0, #0
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1cfb      	adds	r3, r7, #3
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	701a      	strb	r2, [r3, #0]
	if (x_value >= 172 || y_value >= 72)
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	2bab      	cmp	r3, #171	; 0xab
 800439c:	d84f      	bhi.n	800443e <write_pixel+0xc6>
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2b47      	cmp	r3, #71	; 0x47
 80043a4:	d84b      	bhi.n	800443e <write_pixel+0xc6>
		return;

	uint16_t 
		num_byte = x_value * MAX_X_SIZE_BYTE * NUM_BIT_ON_PIX + y_value / NUM_PIX_ON_CELL,
 80043a6:	1dbb      	adds	r3, r7, #6
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	1c1a      	adds	r2, r3, #0
 80043ac:	00d2      	lsls	r2, r2, #3
 80043ae:	18d3      	adds	r3, r2, r3
 80043b0:	18db      	adds	r3, r3, r3
 80043b2:	b299      	uxth	r1, r3
 80043b4:	1d3b      	adds	r3, r7, #4
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	230e      	movs	r3, #14
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	188a      	adds	r2, r1, r2
 80043c2:	801a      	strh	r2, [r3, #0]
		num_pos = y_value % NUM_PIX_ON_CELL;
 80043c4:	230c      	movs	r3, #12
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	1d3a      	adds	r2, r7, #4
 80043ca:	8812      	ldrh	r2, [r2, #0]
 80043cc:	2103      	movs	r1, #3
 80043ce:	400a      	ands	r2, r1
 80043d0:	801a      	strh	r2, [r3, #0]
	
	if (color == COLOR_BLACK)
 80043d2:	1cfb      	adds	r3, r7, #3
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d119      	bne.n	800440e <write_pixel+0x96>
		screen_paper_memory[num_byte] &= ~(0x3 << (6 - num_pos * NUM_BIT_ON_PIX));
 80043da:	200e      	movs	r0, #14
 80043dc:	183b      	adds	r3, r7, r0
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <write_pixel+0xd0>)
 80043e2:	5cd3      	ldrb	r3, [r2, r3]
 80043e4:	b25b      	sxtb	r3, r3
 80043e6:	220c      	movs	r2, #12
 80043e8:	18ba      	adds	r2, r7, r2
 80043ea:	8812      	ldrh	r2, [r2, #0]
 80043ec:	2103      	movs	r1, #3
 80043ee:	1a8a      	subs	r2, r1, r2
 80043f0:	0052      	lsls	r2, r2, #1
 80043f2:	2103      	movs	r1, #3
 80043f4:	4091      	lsls	r1, r2
 80043f6:	000a      	movs	r2, r1
 80043f8:	b252      	sxtb	r2, r2
 80043fa:	43d2      	mvns	r2, r2
 80043fc:	b252      	sxtb	r2, r2
 80043fe:	4013      	ands	r3, r2
 8004400:	b25a      	sxtb	r2, r3
 8004402:	183b      	adds	r3, r7, r0
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b2d1      	uxtb	r1, r2
 8004408:	4a0f      	ldr	r2, [pc, #60]	; (8004448 <write_pixel+0xd0>)
 800440a:	54d1      	strb	r1, [r2, r3]
 800440c:	e018      	b.n	8004440 <write_pixel+0xc8>
	else
		screen_paper_memory[num_byte] |= (0x3 << (6 - num_pos * NUM_BIT_ON_PIX));
 800440e:	200e      	movs	r0, #14
 8004410:	183b      	adds	r3, r7, r0
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <write_pixel+0xd0>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	b25a      	sxtb	r2, r3
 800441a:	230c      	movs	r3, #12
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	2103      	movs	r1, #3
 8004422:	1acb      	subs	r3, r1, r3
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	2103      	movs	r1, #3
 8004428:	4099      	lsls	r1, r3
 800442a:	000b      	movs	r3, r1
 800442c:	b25b      	sxtb	r3, r3
 800442e:	4313      	orrs	r3, r2
 8004430:	b25a      	sxtb	r2, r3
 8004432:	183b      	adds	r3, r7, r0
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b2d1      	uxtb	r1, r2
 8004438:	4a03      	ldr	r2, [pc, #12]	; (8004448 <write_pixel+0xd0>)
 800443a:	54d1      	strb	r1, [r2, r3]
 800443c:	e000      	b.n	8004440 <write_pixel+0xc8>
		return;
 800443e:	46c0      	nop			; (mov r8, r8)
}
 8004440:	46bd      	mov	sp, r7
 8004442:	b005      	add	sp, #20
 8004444:	bd90      	pop	{r4, r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	200000bc 	.word	0x200000bc

0800444c <draw_v_line>:

void draw_v_line (uint16_t x_value, uint16_t y_value, uint16_t length) {
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	0004      	movs	r4, r0
 8004454:	0008      	movs	r0, r1
 8004456:	0011      	movs	r1, r2
 8004458:	1dbb      	adds	r3, r7, #6
 800445a:	1c22      	adds	r2, r4, #0
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	1c02      	adds	r2, r0, #0
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	1cbb      	adds	r3, r7, #2
 8004466:	1c0a      	adds	r2, r1, #0
 8004468:	801a      	strh	r2, [r3, #0]
	for (uint16_t shift = 0; shift < length; shift++) 
 800446a:	230e      	movs	r3, #14
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	2200      	movs	r2, #0
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	e011      	b.n	8004498 <draw_v_line+0x4c>
		write_pixel (x_value, y_value + shift, COLOR_BLACK);
 8004474:	1d3a      	adds	r2, r7, #4
 8004476:	240e      	movs	r4, #14
 8004478:	193b      	adds	r3, r7, r4
 800447a:	8812      	ldrh	r2, [r2, #0]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	18d3      	adds	r3, r2, r3
 8004480:	b299      	uxth	r1, r3
 8004482:	1dbb      	adds	r3, r7, #6
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	2200      	movs	r2, #0
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff ff75 	bl	8004378 <write_pixel>
	for (uint16_t shift = 0; shift < length; shift++) 
 800448e:	193b      	adds	r3, r7, r4
 8004490:	881a      	ldrh	r2, [r3, #0]
 8004492:	193b      	adds	r3, r7, r4
 8004494:	3201      	adds	r2, #1
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	230e      	movs	r3, #14
 800449a:	18fa      	adds	r2, r7, r3
 800449c:	1cbb      	adds	r3, r7, #2
 800449e:	8812      	ldrh	r2, [r2, #0]
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3e6      	bcc.n	8004474 <draw_v_line+0x28>
}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b005      	add	sp, #20
 80044ac:	bd90      	pop	{r4, r7, pc}

080044ae <draw_h_line>:

void draw_h_line (uint16_t x_value, uint16_t y_value, uint16_t length) {
 80044ae:	b590      	push	{r4, r7, lr}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	0004      	movs	r4, r0
 80044b6:	0008      	movs	r0, r1
 80044b8:	0011      	movs	r1, r2
 80044ba:	1dbb      	adds	r3, r7, #6
 80044bc:	1c22      	adds	r2, r4, #0
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	1c02      	adds	r2, r0, #0
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	1cbb      	adds	r3, r7, #2
 80044c8:	1c0a      	adds	r2, r1, #0
 80044ca:	801a      	strh	r2, [r3, #0]
	for (uint16_t shift = 0; shift < length; shift++) 
 80044cc:	230e      	movs	r3, #14
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	2200      	movs	r2, #0
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e011      	b.n	80044fa <draw_h_line+0x4c>
		write_pixel (x_value + shift, y_value, COLOR_BLACK);
 80044d6:	1dba      	adds	r2, r7, #6
 80044d8:	240e      	movs	r4, #14
 80044da:	193b      	adds	r3, r7, r4
 80044dc:	8812      	ldrh	r2, [r2, #0]
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	18d3      	adds	r3, r2, r3
 80044e2:	b298      	uxth	r0, r3
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	2200      	movs	r2, #0
 80044ea:	0019      	movs	r1, r3
 80044ec:	f7ff ff44 	bl	8004378 <write_pixel>
	for (uint16_t shift = 0; shift < length; shift++) 
 80044f0:	193b      	adds	r3, r7, r4
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	193b      	adds	r3, r7, r4
 80044f6:	3201      	adds	r2, #1
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	230e      	movs	r3, #14
 80044fc:	18fa      	adds	r2, r7, r3
 80044fe:	1cbb      	adds	r3, r7, #2
 8004500:	8812      	ldrh	r2, [r2, #0]
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d3e6      	bcc.n	80044d6 <draw_h_line+0x28>
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	b005      	add	sp, #20
 800450e:	bd90      	pop	{r4, r7, pc}

08004510 <draw_rectangle>:

void draw_rectangle (uint16_t x_value, uint16_t y_value, uint16_t width, uint16_t height) {
 8004510:	b5b0      	push	{r4, r5, r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	0005      	movs	r5, r0
 8004518:	000c      	movs	r4, r1
 800451a:	0010      	movs	r0, r2
 800451c:	0019      	movs	r1, r3
 800451e:	1dbb      	adds	r3, r7, #6
 8004520:	1c2a      	adds	r2, r5, #0
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	1d3b      	adds	r3, r7, #4
 8004526:	1c22      	adds	r2, r4, #0
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	1cbb      	adds	r3, r7, #2
 800452c:	1c02      	adds	r2, r0, #0
 800452e:	801a      	strh	r2, [r3, #0]
 8004530:	003b      	movs	r3, r7
 8004532:	1c0a      	adds	r2, r1, #0
 8004534:	801a      	strh	r2, [r3, #0]
	draw_h_line (x_value, y_value, width);
 8004536:	1cbb      	adds	r3, r7, #2
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	8819      	ldrh	r1, [r3, #0]
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	0018      	movs	r0, r3
 8004544:	f7ff ffb3 	bl	80044ae <draw_h_line>
	draw_h_line (x_value, (y_value + height), (width + 1));
 8004548:	1d3a      	adds	r2, r7, #4
 800454a:	003b      	movs	r3, r7
 800454c:	8812      	ldrh	r2, [r2, #0]
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	18d3      	adds	r3, r2, r3
 8004552:	b299      	uxth	r1, r3
 8004554:	1cbb      	adds	r3, r7, #2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	1dbb      	adds	r3, r7, #6
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	0018      	movs	r0, r3
 8004562:	f7ff ffa4 	bl	80044ae <draw_h_line>

	draw_v_line (x_value, y_value, height);
 8004566:	003b      	movs	r3, r7
 8004568:	881a      	ldrh	r2, [r3, #0]
 800456a:	1d3b      	adds	r3, r7, #4
 800456c:	8819      	ldrh	r1, [r3, #0]
 800456e:	1dbb      	adds	r3, r7, #6
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	0018      	movs	r0, r3
 8004574:	f7ff ff6a 	bl	800444c <draw_v_line>
	draw_v_line ((x_value + width), y_value, height);
 8004578:	1dba      	adds	r2, r7, #6
 800457a:	1cbb      	adds	r3, r7, #2
 800457c:	8812      	ldrh	r2, [r2, #0]
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	18d3      	adds	r3, r2, r3
 8004582:	b298      	uxth	r0, r3
 8004584:	003b      	movs	r3, r7
 8004586:	881a      	ldrh	r2, [r3, #0]
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	0019      	movs	r1, r3
 800458e:	f7ff ff5d 	bl	800444c <draw_v_line>
}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	46bd      	mov	sp, r7
 8004596:	b002      	add	sp, #8
 8004598:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800459c <draw_char>:

#define PIX_COLOR(cell, num_pix) ((cell >> (6 - num_pix * 2)) & 0x3)
void draw_char (uint16_t x_value, uint16_t y_value, uint8_t ascii) {
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	0004      	movs	r4, r0
 80045a4:	0008      	movs	r0, r1
 80045a6:	0011      	movs	r1, r2
 80045a8:	1dbb      	adds	r3, r7, #6
 80045aa:	1c22      	adds	r2, r4, #0
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	1d3b      	adds	r3, r7, #4
 80045b0:	1c02      	adds	r2, r0, #0
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	1cfb      	adds	r3, r7, #3
 80045b6:	1c0a      	adds	r2, r1, #0
 80045b8:	701a      	strb	r2, [r3, #0]
  uint16_t
  	index = 0,  
 80045ba:	231e      	movs	r3, #30
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2200      	movs	r2, #0
 80045c0:	801a      	strh	r2, [r3, #0]
  	width  = pFont->Width,
 80045c2:	4b46      	ldr	r3, [pc, #280]	; (80046dc <draw_char+0x140>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	2116      	movs	r1, #22
 80045c8:	187b      	adds	r3, r7, r1
 80045ca:	8892      	ldrh	r2, [r2, #4]
 80045cc:	801a      	strh	r2, [r3, #0]
  	height = pFont->Height,
 80045ce:	4b43      	ldr	r3, [pc, #268]	; (80046dc <draw_char+0x140>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	2014      	movs	r0, #20
 80045d4:	183b      	adds	r3, r7, r0
 80045d6:	88d2      	ldrh	r2, [r2, #6]
 80045d8:	801a      	strh	r2, [r3, #0]
	data_length = height * width;
 80045da:	2412      	movs	r4, #18
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	183a      	adds	r2, r7, r0
 80045e0:	1879      	adds	r1, r7, r1
 80045e2:	8812      	ldrh	r2, [r2, #0]
 80045e4:	8809      	ldrh	r1, [r1, #0]
 80045e6:	434a      	muls	r2, r1
 80045e8:	801a      	strh	r2, [r3, #0]

	ascii -= 32;
 80045ea:	1cfb      	adds	r3, r7, #3
 80045ec:	1cfa      	adds	r2, r7, #3
 80045ee:	7812      	ldrb	r2, [r2, #0]
 80045f0:	3a20      	subs	r2, #32
 80045f2:	701a      	strb	r2, [r3, #0]
	const uint8_t * ch = &pFont->table[ascii * data_length];
 80045f4:	4b39      	ldr	r3, [pc, #228]	; (80046dc <draw_char+0x140>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	1cfa      	adds	r2, r7, #3
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	1939      	adds	r1, r7, r4
 8004600:	8809      	ldrh	r1, [r1, #0]
 8004602:	434a      	muls	r2, r1
 8004604:	189b      	adds	r3, r3, r2
 8004606:	60fb      	str	r3, [r7, #12]

	for (uint16_t num_h_index = 0; num_h_index < width; num_h_index++)
 8004608:	231c      	movs	r3, #28
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	2200      	movs	r2, #0
 800460e:	801a      	strh	r2, [r3, #0]
 8004610:	e057      	b.n	80046c2 <draw_char+0x126>
		for (uint16_t num_v_index = 0; num_v_index < height; num_v_index++){
 8004612:	231a      	movs	r3, #26
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	2200      	movs	r2, #0
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	e044      	b.n	80046a6 <draw_char+0x10a>
			for (uint16_t num_pix = 0; num_pix < NUM_PIX_ON_CELL; num_pix++){
 800461c:	2318      	movs	r3, #24
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2200      	movs	r2, #0
 8004622:	801a      	strh	r2, [r3, #0]
 8004624:	e02e      	b.n	8004684 <draw_char+0xe8>
				write_pixel(
 8004626:	1dba      	adds	r2, r7, #6
 8004628:	231c      	movs	r3, #28
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	8812      	ldrh	r2, [r2, #0]
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	18d3      	adds	r3, r2, r3
 8004632:	b298      	uxth	r0, r3
					x_value + num_h_index,
					y_value + num_v_index * NUM_PIX_ON_CELL  + num_pix,
 8004634:	231a      	movs	r3, #26
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	b29a      	uxth	r2, r3
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	18d3      	adds	r3, r2, r3
 8004644:	b29a      	uxth	r2, r3
				write_pixel(
 8004646:	2518      	movs	r5, #24
 8004648:	197b      	adds	r3, r7, r5
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	18d3      	adds	r3, r2, r3
 800464e:	b299      	uxth	r1, r3
					PIX_COLOR(ch[index], num_pix)
 8004650:	231e      	movs	r3, #30
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	18d3      	adds	r3, r2, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	001c      	movs	r4, r3
 800465e:	197b      	adds	r3, r7, r5
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	2203      	movs	r2, #3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	411c      	asrs	r4, r3
 800466a:	0023      	movs	r3, r4
 800466c:	b2db      	uxtb	r3, r3
				write_pixel(
 800466e:	2203      	movs	r2, #3
 8004670:	4013      	ands	r3, r2
 8004672:	b2db      	uxtb	r3, r3
 8004674:	001a      	movs	r2, r3
 8004676:	f7ff fe7f 	bl	8004378 <write_pixel>
			for (uint16_t num_pix = 0; num_pix < NUM_PIX_ON_CELL; num_pix++){
 800467a:	197b      	adds	r3, r7, r5
 800467c:	881a      	ldrh	r2, [r3, #0]
 800467e:	197b      	adds	r3, r7, r5
 8004680:	3201      	adds	r2, #1
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	2318      	movs	r3, #24
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d9cb      	bls.n	8004626 <draw_char+0x8a>
				);
			}
			index++;
 800468e:	211e      	movs	r1, #30
 8004690:	187b      	adds	r3, r7, r1
 8004692:	881a      	ldrh	r2, [r3, #0]
 8004694:	187b      	adds	r3, r7, r1
 8004696:	3201      	adds	r2, #1
 8004698:	801a      	strh	r2, [r3, #0]
		for (uint16_t num_v_index = 0; num_v_index < height; num_v_index++){
 800469a:	211a      	movs	r1, #26
 800469c:	187b      	adds	r3, r7, r1
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	3201      	adds	r2, #1
 80046a4:	801a      	strh	r2, [r3, #0]
 80046a6:	231a      	movs	r3, #26
 80046a8:	18fa      	adds	r2, r7, r3
 80046aa:	2314      	movs	r3, #20
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	8812      	ldrh	r2, [r2, #0]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d3b2      	bcc.n	800461c <draw_char+0x80>
	for (uint16_t num_h_index = 0; num_h_index < width; num_h_index++)
 80046b6:	211c      	movs	r1, #28
 80046b8:	187b      	adds	r3, r7, r1
 80046ba:	881a      	ldrh	r2, [r3, #0]
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	3201      	adds	r2, #1
 80046c0:	801a      	strh	r2, [r3, #0]
 80046c2:	231c      	movs	r3, #28
 80046c4:	18fa      	adds	r2, r7, r3
 80046c6:	2316      	movs	r3, #22
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	8812      	ldrh	r2, [r2, #0]
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d39f      	bcc.n	8004612 <draw_char+0x76>
		}
} 
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b008      	add	sp, #32
 80046d8:	bdb0      	pop	{r4, r5, r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	20000044 	.word	0x20000044

080046e0 <draw_string>:

#define SCREEN_X_SIZE 172
#define CHAR_NOT_WITHOUT_FOR_SCREEN (((SCREEN_X_SIZE - (num_ch * pFont->Width)) & 0xFFFF) >= pFont->Width)
void draw_string  (uint16_t x_value, uint16_t y_value, uint8_t * text) {
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	603a      	str	r2, [r7, #0]
 80046e8:	1dbb      	adds	r3, r7, #6
 80046ea:	1c02      	adds	r2, r0, #0
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	1c0a      	adds	r2, r1, #0
 80046f2:	801a      	strh	r2, [r3, #0]
	uint16_t 
		size = 0,
 80046f4:	230e      	movs	r3, #14
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2200      	movs	r2, #0
 80046fa:	801a      	strh	r2, [r3, #0]
		num_ch = 0;
 80046fc:	230c      	movs	r3, #12
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	2200      	movs	r2, #0
 8004702:	801a      	strh	r2, [r3, #0]
	uint8_t * ptr = text;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	60bb      	str	r3, [r7, #8]
	while (*ptr++) size++;
 8004708:	e005      	b.n	8004716 <draw_string+0x36>
 800470a:	210e      	movs	r1, #14
 800470c:	187b      	adds	r3, r7, r1
 800470e:	881a      	ldrh	r2, [r3, #0]
 8004710:	187b      	adds	r3, r7, r1
 8004712:	3201      	adds	r2, #1
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	60ba      	str	r2, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f3      	bne.n	800470a <draw_string+0x2a>



	while ((*text != 0) &  CHAR_NOT_WITHOUT_FOR_SCREEN){
 8004722:	e019      	b.n	8004758 <draw_string+0x78>
		draw_char(x_value, y_value, *text);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	8819      	ldrh	r1, [r3, #0]
 800472c:	1dbb      	adds	r3, r7, #6
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	0018      	movs	r0, r3
 8004732:	f7ff ff33 	bl	800459c <draw_char>
		x_value += pFont->Width;
 8004736:	4b19      	ldr	r3, [pc, #100]	; (800479c <draw_string+0xbc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	8899      	ldrh	r1, [r3, #4]
 800473c:	1dbb      	adds	r3, r7, #6
 800473e:	1dba      	adds	r2, r7, #6
 8004740:	8812      	ldrh	r2, [r2, #0]
 8004742:	188a      	adds	r2, r1, r2
 8004744:	801a      	strh	r2, [r3, #0]
		text++;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	603b      	str	r3, [r7, #0]
		num_ch++;
 800474c:	210c      	movs	r1, #12
 800474e:	187b      	adds	r3, r7, r1
 8004750:	881a      	ldrh	r2, [r3, #0]
 8004752:	187b      	adds	r3, r7, r1
 8004754:	3201      	adds	r2, #1
 8004756:	801a      	strh	r2, [r3, #0]
	while ((*text != 0) &  CHAR_NOT_WITHOUT_FOR_SCREEN){
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	4193      	sbcs	r3, r2
 8004760:	b2d9      	uxtb	r1, r3
 8004762:	230c      	movs	r3, #12
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <draw_string+0xbc>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	889b      	ldrh	r3, [r3, #4]
 800476e:	4353      	muls	r3, r2
 8004770:	22ac      	movs	r2, #172	; 0xac
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	4a08      	ldr	r2, [pc, #32]	; (800479c <draw_string+0xbc>)
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	8892      	ldrh	r2, [r2, #4]
 800477e:	17dc      	asrs	r4, r3, #31
 8004780:	0fd0      	lsrs	r0, r2, #31
 8004782:	4293      	cmp	r3, r2
 8004784:	4144      	adcs	r4, r0
 8004786:	0023      	movs	r3, r4
 8004788:	b2db      	uxtb	r3, r3
 800478a:	400b      	ands	r3, r1
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1c8      	bne.n	8004724 <draw_string+0x44>
	}
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b005      	add	sp, #20
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	20000044 	.word	0x20000044

080047a0 <set_font>:

void set_font (uint8_t font) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	0002      	movs	r2, r0
 80047a8:	1dfb      	adds	r3, r7, #7
 80047aa:	701a      	strb	r2, [r3, #0]
	switch (font) {
 80047ac:	1dfb      	adds	r3, r7, #7
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b0c      	cmp	r3, #12
 80047b2:	d00c      	beq.n	80047ce <set_font+0x2e>
 80047b4:	dc02      	bgt.n	80047bc <set_font+0x1c>
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d005      	beq.n	80047c6 <set_font+0x26>
 80047ba:	e014      	b.n	80047e6 <set_font+0x46>
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d00a      	beq.n	80047d6 <set_font+0x36>
 80047c0:	2b14      	cmp	r3, #20
 80047c2:	d00c      	beq.n	80047de <set_font+0x3e>
 80047c4:	e00f      	b.n	80047e6 <set_font+0x46>
		case 8: pFont = &Font8; break;
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <set_font+0x58>)
 80047c8:	4a0c      	ldr	r2, [pc, #48]	; (80047fc <set_font+0x5c>)
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e00f      	b.n	80047ee <set_font+0x4e>
		case 12: pFont = &Font12; break;
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <set_font+0x58>)
 80047d0:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <set_font+0x60>)
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e00b      	b.n	80047ee <set_font+0x4e>
		case 16: pFont = &Font16; break;
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <set_font+0x58>)
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <set_font+0x64>)
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e007      	b.n	80047ee <set_font+0x4e>
		case 20: pFont = &Font20; break;
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <set_font+0x58>)
 80047e0:	4a09      	ldr	r2, [pc, #36]	; (8004808 <set_font+0x68>)
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e003      	b.n	80047ee <set_font+0x4e>
		default: pFont = &Font12; break;
 80047e6:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <set_font+0x58>)
 80047e8:	4a05      	ldr	r2, [pc, #20]	; (8004800 <set_font+0x60>)
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	46c0      	nop			; (mov r8, r8)
	}
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	20000044 	.word	0x20000044
 80047fc:	2000003c 	.word	0x2000003c
 8004800:	20000024 	.word	0x20000024
 8004804:	2000002c 	.word	0x2000002c
 8004808:	20000034 	.word	0x20000034

0800480c <fill_rectangle>:

void fill_rectangle (uint16_t x_value, uint16_t y_value, uint16_t width, uint16_t height, uint8_t color) {
 800480c:	b5b0      	push	{r4, r5, r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	0005      	movs	r5, r0
 8004814:	000c      	movs	r4, r1
 8004816:	0010      	movs	r0, r2
 8004818:	0019      	movs	r1, r3
 800481a:	1dbb      	adds	r3, r7, #6
 800481c:	1c2a      	adds	r2, r5, #0
 800481e:	801a      	strh	r2, [r3, #0]
 8004820:	1d3b      	adds	r3, r7, #4
 8004822:	1c22      	adds	r2, r4, #0
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	1cbb      	adds	r3, r7, #2
 8004828:	1c02      	adds	r2, r0, #0
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	003b      	movs	r3, r7
 800482e:	1c0a      	adds	r2, r1, #0
 8004830:	801a      	strh	r2, [r3, #0]
	for (uint16_t num_v_line = 0; num_v_line < width; num_v_line++)
 8004832:	230e      	movs	r3, #14
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2200      	movs	r2, #0
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e02a      	b.n	8004892 <fill_rectangle+0x86>
		for (uint16_t num_h_line = 0; num_h_line < height; num_h_line++){
 800483c:	230c      	movs	r3, #12
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	2200      	movs	r2, #0
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	e018      	b.n	8004878 <fill_rectangle+0x6c>
			write_pixel(x_value + num_v_line, y_value + num_h_line, color);
 8004846:	1dba      	adds	r2, r7, #6
 8004848:	230e      	movs	r3, #14
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	8812      	ldrh	r2, [r2, #0]
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	18d3      	adds	r3, r2, r3
 8004852:	b298      	uxth	r0, r3
 8004854:	1d3a      	adds	r2, r7, #4
 8004856:	240c      	movs	r4, #12
 8004858:	193b      	adds	r3, r7, r4
 800485a:	8812      	ldrh	r2, [r2, #0]
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	18d3      	adds	r3, r2, r3
 8004860:	b29b      	uxth	r3, r3
 8004862:	2220      	movs	r2, #32
 8004864:	18ba      	adds	r2, r7, r2
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	0019      	movs	r1, r3
 800486a:	f7ff fd85 	bl	8004378 <write_pixel>
		for (uint16_t num_h_line = 0; num_h_line < height; num_h_line++){
 800486e:	193b      	adds	r3, r7, r4
 8004870:	881a      	ldrh	r2, [r3, #0]
 8004872:	193b      	adds	r3, r7, r4
 8004874:	3201      	adds	r2, #1
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	230c      	movs	r3, #12
 800487a:	18fa      	adds	r2, r7, r3
 800487c:	003b      	movs	r3, r7
 800487e:	8812      	ldrh	r2, [r2, #0]
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d3df      	bcc.n	8004846 <fill_rectangle+0x3a>
	for (uint16_t num_v_line = 0; num_v_line < width; num_v_line++)
 8004886:	210e      	movs	r1, #14
 8004888:	187b      	adds	r3, r7, r1
 800488a:	881a      	ldrh	r2, [r3, #0]
 800488c:	187b      	adds	r3, r7, r1
 800488e:	3201      	adds	r2, #1
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	230e      	movs	r3, #14
 8004894:	18fa      	adds	r2, r7, r3
 8004896:	1cbb      	adds	r3, r7, #2
 8004898:	8812      	ldrh	r2, [r2, #0]
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d3cd      	bcc.n	800483c <fill_rectangle+0x30>
		}
	
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b004      	add	sp, #16
 80048a6:	bdb0      	pop	{r4, r5, r7, pc}

080048a8 <display_screen>:
extern EPD_DrvTypeDef gde021a1_drv;
#include "gpio.h"
#define EPD_BUSY_PIN GPIO_PIN_8
#define EPD_BUSY_GPIO_PORT GPIOA

void display_screen (void)  {
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
  uint32_t index = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	603b      	str	r3, [r7, #0]

  gde021a1_drv.SetDisplayWindow(0, 0, 171, 17);
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <display_screen+0x60>)
 80048b4:	689c      	ldr	r4, [r3, #8]
 80048b6:	2311      	movs	r3, #17
 80048b8:	22ab      	movs	r2, #171	; 0xab
 80048ba:	2100      	movs	r1, #0
 80048bc:	2000      	movs	r0, #0
 80048be:	47a0      	blx	r4

  for(uint32_t index = 0; index < 3096; index++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	e00a      	b.n	80048dc <display_screen+0x34>
  {
	  gde021a1_drv.WritePixel(screen_paper_memory[index]);
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <display_screen+0x60>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4910      	ldr	r1, [pc, #64]	; (800490c <display_screen+0x64>)
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	188a      	adds	r2, r1, r2
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	0010      	movs	r0, r2
 80048d4:	4798      	blx	r3
  for(uint32_t index = 0; index < 3096; index++)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3301      	adds	r3, #1
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <display_screen+0x68>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d9f0      	bls.n	80048c6 <display_screen+0x1e>
  }

  gde021a1_drv.RefreshDisplay();
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <display_screen+0x60>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4798      	blx	r3
  while (HAL_GPIO_ReadPin(EPD_BUSY_GPIO_PORT, EPD_BUSY_PIN) != (uint16_t)RESET);
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	005a      	lsls	r2, r3, #1
 80048f0:	23a0      	movs	r3, #160	; 0xa0
 80048f2:	05db      	lsls	r3, r3, #23
 80048f4:	0011      	movs	r1, r2
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7fd fb10 	bl	8001f1c <HAL_GPIO_ReadPin>
 80048fc:	1e03      	subs	r3, r0, #0
 80048fe:	d1f5      	bne.n	80048ec <display_screen+0x44>
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b003      	add	sp, #12
 8004906:	bd90      	pop	{r4, r7, pc}
 8004908:	20000004 	.word	0x20000004
 800490c:	200000bc 	.word	0x200000bc
 8004910:	00000c17 	.word	0x00000c17

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	2600      	movs	r6, #0
 8004918:	4d0c      	ldr	r5, [pc, #48]	; (800494c <__libc_init_array+0x38>)
 800491a:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <__libc_init_array+0x3c>)
 800491c:	1b64      	subs	r4, r4, r5
 800491e:	10a4      	asrs	r4, r4, #2
 8004920:	42a6      	cmp	r6, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	2600      	movs	r6, #0
 8004926:	f000 f821 	bl	800496c <_init>
 800492a:	4d0a      	ldr	r5, [pc, #40]	; (8004954 <__libc_init_array+0x40>)
 800492c:	4c0a      	ldr	r4, [pc, #40]	; (8004958 <__libc_init_array+0x44>)
 800492e:	1b64      	subs	r4, r4, r5
 8004930:	10a4      	asrs	r4, r4, #2
 8004932:	42a6      	cmp	r6, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	00b3      	lsls	r3, r6, #2
 800493a:	58eb      	ldr	r3, [r5, r3]
 800493c:	4798      	blx	r3
 800493e:	3601      	adds	r6, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	00b3      	lsls	r3, r6, #2
 8004944:	58eb      	ldr	r3, [r5, r3]
 8004946:	4798      	blx	r3
 8004948:	3601      	adds	r6, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	0800803c 	.word	0x0800803c
 8004950:	0800803c 	.word	0x0800803c
 8004954:	0800803c 	.word	0x0800803c
 8004958:	08008040 	.word	0x08008040

0800495c <memset>:
 800495c:	0003      	movs	r3, r0
 800495e:	1812      	adds	r2, r2, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	7019      	strb	r1, [r3, #0]
 8004968:	3301      	adds	r3, #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <_init>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr

08004978 <_fini>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr
